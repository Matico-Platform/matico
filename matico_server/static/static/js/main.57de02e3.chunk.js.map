{"version":3,"sources":["api.ts","Components/Layout/Layout.tsx","Contexts/UserContext.tsx","Components/Button/Button.tsx","Components/Card/Card.tsx","Components/Tabs/TabStyles.tsx","Components/Tabs/Tabs.tsx","Components/Uploader/Uploader.tsx","Components/Forms/Forms.tsx","Components/LoginSignup/LoginSignup.tsx","Pages/LoginSignupPage/LoginSignupPageStyles.tsx","Pages/LoginSignupPage/LoginSignupPage.tsx","Components/SyncDatasetForm/SyncDatasetForm.tsx","Components/ProgressBar/ProgressBarStyles.tsx","Components/ProgressBar/ProgressBar.tsx","Components/Uploader/UploaderStyles.tsx","Components/FileSelector/FileUploadDetails.tsx","Components/FileSelector/FileSelector.tsx","Components/DatasetCreationForm/DatasetCreationForm.tsx","Components/List/ListStyles.tsx","Components/List/List.tsx","Components/DatasetList/DatasetList.tsx","Pages/DatasetsPage/DatasetsPageStyles.tsx","Hooks/useDatasets.ts","Pages/DatasetsPage/DatasetsPage.tsx","Components/DashboardList/DashboardList.tsx","Pages/DashboardsPage/DashboardsPageStyles.tsx","Components/NewDashboard/NewDashboard.tsx","Hooks/useDashboards.ts","Pages/DashboardsPage/DashboardsPage.tsx","Hooks/useDataSource.ts","Hooks/useDataset.ts","Contexts/DashbardBuilderContext.tsx","Pages/DatasetViewPage/DatasetViewPageStyles.tsx","Components/DataTable/DataTableStyles.tsx","Components/DataTable/DataTable.tsx","Components/QueryPane/QueryPaneStyles.tsx","Components/QueryPane/QueryPane.tsx","Components/FeatureEditor/FeatureEditorStyles.tsx","Components/FeatureEditor/FeatureEditor.tsx","Components/Pagination/Pagination.tsx","Components/HoverToolTip/HoverToolTipStyles.tsx","Components/HoverToolTip/HoverToolTip.tsx","Pages/DatasetViewPage/DatasetViewPage.tsx","Pages/DashboardBuilderPage/DashboardBuilderPageStyles.tsx","Components/DashboardViewer/DashboardViewerStyles.tsx","Hooks/useDebounceEffect.ts","Components/DashboardViewer/DashboardViewer.tsx","Components/BaseMapSelector/BaseMapSelectorStyles.tsx","Components/BaseMapSelector/BaseMapSelector.tsx","Components/LayerList/LayerListStyles.tsx","Components/LayerControls/LayerControlsStyles.tsx","Hooks/useSourceColumns.ts","Components/SimpleSwitch/SimpleSwitchStyles.tsx","Components/SimpleSwitch/SimpleSwitch.tsx","Components/DashboardBuilderSelectorStyles.tsx","Components/ColorComponents/ColorSelector/ColorSelectorStyles.tsx","Hooks/useUniqueColumnValues.ts","Components/ColorComponents/ColorSelector/ColorSelector.tsx","Components/ColorComponents/ColorPaletteSelector/ColorPaletteSelectorStyles.tsx","Components/ColorComponents/ColorPalette/ColorPaletteStyles.tsx","Components/ColorComponents/ColorPalette/ColorPalette.tsx","Components/ColorComponents/ColorUtils.ts","Components/ColorComponents/ColorPaletteSelector/ColorPaletteSelector.tsx","Components/ColorComponents/CategoryColorSelector/CategoryColorSelector.tsx","Components/ColorComponents/ColorBar/ColorBar.tsx","Components/ColorComponents/SimpleColorSelector/SimpleColorSelectorStyles.tsx","Components/ColorComponents/SimpleColorSelector/SimpleColorSelector.tsx","Components/NumericalComponents/NumericalSelectorStyles.tsx","Components/Charts/Histogram/Histogram.tsx","Hooks/useBasicColumnStats.ts","Hooks/useColumnHistogram.ts","Components/NumericalComponents/NumericalSelector.tsx","Components/NumericalComponents/Categorizer/Categorizer.tsx","Components/LayerControls/PolygonLayerControl/PolygonLayerControl.tsx","Components/LayerControls/LineLayerControl/LineLayerControl.tsx","Components/LayerControls/PointLayerControl/PointLayerControl.tsx","Components/LayerControls/LayerControls.tsx","Components/LayerList/LayerList.tsx","Components/DashboardBuilderControlls/DashboardBuilderControllsStyles.tsx","Components/AddLayerModal/AddLayerModalStyles.tsx","Components/AddLayerModal/AddLayerModal.tsx","Components/DashboardBuilderControlls/DashboardBuilderControlls.tsx","Pages/DashboardBuilderPage/DashboardBuilderPage.tsx","Pages/ProfilePage/ProfilePage.tsx","Pages/Playground/PlaygroundStyles.tsx","Pages/Playground/Playground.tsx","Components/NavBar/NavBarStyles.tsx","Components/NavBar/NavBar.tsx","Pages/HomePage/HomePage/HomePage.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["NumericalCategorizationMethod","ScaleFunc","AppLayout","styled","div","theme","colors","background","FlexSeperator","NavArea","nav","main","Page","PageContent","DetailsArea","size","undefined","secondary","Paper","BaseMap","Unit","DefaultFillColor","DefaultStrokeColor","DefaultPolyonStyle","fill","single_color","color","stroke","stroke_width","opacity","stroke_units","pixels","elevation","DefaultPointStyle","size_units","DefaultLineStyle","DefaultMapStyle","center","zoom","base_map","Light","layers","a","axios","create","baseURL","window","location","origin","headers","get","email","password","post","username","id","newDashboard","dataset_id","update","put","source","column","Object","keys","datasetSource","Dataset","name","JSON","stringify","BasicStats","no_bins","Error","column_name","ValueCounts","bins","Histogram","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","ActionType","InitalUserState","user","errors","attempting_signin","attempting_signup","UserContext","createContext","state","dispatch","reducer","action","type","UPDATE_USER","payload","SIGNED_IN","ATTEMPT_SIGNUP","SIGNUP_FAILED","SIGNED_OUT","SIGNUP_SUCCESSFUL","ButtonType","useUser","useContext","login","then","result","setItem","data","signup","catch","e","toString","signout","removeItem","UserProvider","children","useReducer","useEffect","getProfile","profile","console","warn","Provider","value","Card","borderRadius","TabHeader","ul","TabContainer","TabContent","Styles","Tab","li","active","onSelect","onClick","Tabs","onTabSelected","activeTab","firstTab","length","props","useState","internalActiveTab","setInternalActiveTab","selected","selectedTab","map","c","activeChild","find","UploadState","Button","button","kind","Primary","Secondary","Dissabled","mainLighter","Form","form","LoginSignup","setUsername","setPassword","setEmail","to","onSubmit","preventDefault","onChange","target","placeholder","LoginSignupPage","SyncDatasetForm","setName","url","setURL","description","setDescription","refreshInterval","setRefreshInterval","message","setMessage","setError","syncDetails","parseInt","ProgressBarOuter","ProgressBarInner","percent","Percent","span","ProgressBar","showPC","progress","progressColor","doneColor","errorColor","toPrecision","UploaderOuter","UploaderFilename","Uploader","file","metadata","onDone","onFail","setProgress","PENDING","setState","onProgress","formData","FormData","log","append","Content_Type","onUploadProgress","Math","round","loaded","total","uploadFile","DONE","FAILED","FileUploadDetails","split","idCol","setIdCol","geomCol","setGeomCol","startUpload","setStartUpload","id_col","geom_col","FileSelector","files","setFiles","Array","from","index","multiple","DatasetCreationForm","onCreated","ListOuter","List","Row","loading","DatasetList","datasets","dataset","DatasetsPage","useDatasets","setDatasets","setLoading","refreshDatasets","getDatasets","finally","DashboardList","dashboards","onDelete","dashboard","dashboard_id","DashboardsPage","NewDashboard","useForm","register","handleSubmit","map_style","createDashboard","ref","required","className","minLength","useDashboards","setDashboards","refreshDashboards","getDashboards","deleteDashboard","delete","SortDirection","useDataset","setDataset","getDataset","useDataSource","params","page","setPage","sortCol","setSortCol","sortDirection","setSortDirection","setData","setTotal","pages","setPages","perPage","api","datasetId","sql","URLSearchParams","DESCENDING","formatUrlWith","ASSCENDING","response","ceil","Content","Map","TablePagination","Table","Details","DataTable","TableRow","tr","secondaryLight","table","selectedID","renderCell","columns","useMemo","Header","accessor","Cell","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","getHeaderProps","render","row","original","values","selectRow","getRowProps","cells","cell","getCellProps","QueryPane","Buttons","ButtonsAndErrors","p","onQuery","query","defaultQuery","defaultValue","mode","fontSize","style","width","flex","editorProps","$blockScrolling","FeatureEditor","FormEntry","feature","editable","onSave","editableFeature","setEditableFeature","dirty","entries","variable","newVal","save","Wrapper","Pagination","onPageChange","pageCount","pageRangeDisplayed","marginPagesDisplayed","forcePage","activeClassName","HoverToolTip","y","x","PropertiesTable","PropertyName","td","PropertyVal","Property","info","kv","INITIAL_VIEW_STATE","longitude","latitude","pitch","bearing","DatasetViewPage","useParams","sqlString","setSQLQuery","selectedRow","setSelectedRow","setSelectedTab","hoverInfo","setHoverInfo","datasetLoading","dataLoading","layer","options","MVTLayer","getLineColor","getLineWidth","lineWidthUnits","getFillColor","getBorderColor","getRadius","stroked","pickable","autoHighlight","highlightColor","radiusUnits","makeMvtLayer","selectFeature","created_at","updated_at","height","initialViewState","controller","event","object","properties","onHover","mapboxApiAccessToken","process","mapStyle","DashboardBuilderPage","Stats","DashboardOuter","initalState","saving","newLayerModalVisible","DashboardBuilderContext","addLayerToDash","newDash","updateLayerStyleOnDash","l","updateBaseMap","baseMap","ADD_LAYER","START_LOADING","LOADING_DONE","SAVING_STARTED","SAVING_DONE","SET_ERROR","SET_DASHBOARD","SET_BASEMAP","SHOW_NEW_LAYER_MODAL","HIDE_NEW_LAYER_MODAL","UPDATE_LAYER_STYLE","useDashboard","addLayer","showNewLayerModal","hideNewLayerModal","updateLayerStyle","DashboardBuilderProvider","updateDash","public","updateDashboard","effect","delay","deps","callback","useCallback","handler","setTimeout","clearTimeout","useDebouncedEffect","getDashboard","dashboardResp","colorSpecificationToGLSpec","category_color","spec","f","cat","categories","findIndex","constructLayer","source_id","Polygon","updateTriggers","Point","Line","DashboardViewer","inputDashboard","providerDashboard","basemap","CartoDBPositron","CartoDBVoyager","CartoDBDarkMatter","Dark","Satelite","Terrain","Streets","lookupBaseMapURL","getTooltip","BaseMapSelector","baseMapOptions","key","label","labelField","valueField","newBaseMap","LayerList","LayerControls","useSourceColumns","setColumns","getDatasetColumns","SimpleSwitch","Option","option","Selector","section","Modes","SelectorStyles","useUniqueColumnValues","columnValues","setColumnValues","getUniqueColumnValues","ColorMappingTypes","ColorPaletteSelector","ColorPalette","Colors","Color","col","getColors","palette","reversed","colorbrewer","slice","reverse","selectedPalette","onOrderChange","onPaletteSelected","customAbbreviation","newPalette","formatOptionLabel","components","SingleValue","styles","container","provided","paddingRight","singleValue","display","alignItems","icon","faArrowLeft","faArrowRight","CategoryColorSelector","onUpdate","colorPalette","setColorPalette","setReversed","selectedColumn","setSelectedColumn","chroma","rgba","Checkbox","checked","count","backgroundColor","reduce","val","ColorBar","join","SimpleColorSelector","expand","setExpand","rgb","r","g","b","icons","faCalculator","category","faAlignJustify","manual","faPalette","ColorSelector","colorSpecification","availableTypes","Simple","activeMode","setActiveMode","cursor","Category","barWidth","useBasicColumnStats","stats","setStats","getColumnStats","ValueMappingTypes","useColumnHistogram","getColumnHistogram","Categorizer","EqualInterval","histogramValues","basicStats","method","hv","bin_mid","freq","min","max","NumericalSelector","valueSpecification","setMethod","Value","getOptionValue","getOptionLabel","control","simpleValue","parseFloat","PolygonLayerControl","updateStrokeWidth","updateStrokeUnits","unit","updateElevation","LineLayerControl","updateSize","PointLayerControl","updateSizeUnit","updateStrokeUnit","number","collapsed","setCollapsed","styleType","updateStyle","faChevronDown","faChevronRight","Section","Sections","AddLayerModal","onDismiss","selectedDataset","setSelectedDataset","selectedLayerType","setSelectedLayerType","LayerTypes","default","dismiss","datasetValues","layerTypeValues","newLayer","DashboardBuilderControlls","ProfilePage","Playground","Code","defaultDash","owner_id","Date","code","setCode","setSpec","saved","parse","maxHeight","keyboardHandler","NavBarOuter","NavBarButton","NavBarSpacer","NavBar","HomePage","App","faMap","faDatabase","faInfo","faUser","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","GloablStyle","createGlobalStyle","reset","ReactDOM","StrictMode","bold","text","document","getElementById"],"mappings":"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","file":"static/js/main.57de02e3.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nexport interface Dataset {\n    name: string;\n    description: string;\n    id: string;\n    created_at: Date;\n    updated_at: Date;\n    geom_col: string;\n    id_col: string;\n}\n\nexport interface Column {\n    name: string;\n    col_type: string;\n    source_query: string;\n}\n\nexport interface User {\n    id: string;\n    username: string;\n    email: string;\n    created_at: Date;\n    updated_at: Date;\n}\n\nexport interface Page {\n    limit: number;\n    offset: number;\n}\n\nexport type Color = [number, number, number, number];\n\nexport interface SingleColorSpecification {\n    color: Color;\n}\n\nexport interface CategoryColorSpecification {\n    column: string;\n    categories: Array<string | number>;\n    colors: Array<Color>;\n}\n\nexport enum NumericalCategorizationMethod {\n    Quantiles = 'quantiles',\n    EqualInterval = 'equal_interval',\n    Scaled = 'scaled',\n    Custom = 'custom',\n}\n\nexport interface DiscreteQuantizer {\n    method: NumericalCategorizationMethod;\n    breaks?: number[];\n    no_breaks: number;\n}\n\nexport interface ContinuiousQuantizer {\n    log: boolean;\n    sqrt: boolean;\n    maxVal: number;\n    minVal: number;\n}\n\nexport interface ContinuiousRange {\n    min: number;\n    max: number;\n}\n\nexport interface DiscreteRange {\n    values: number[];\n}\n\nexport interface ValueSpecification {\n    column?: string;\n    simpleValue?: number;\n    discreteQuantizer?: DiscreteQuantizer;\n    continuiousQuantizer?: ContinuiousQuantizer;\n    continuiousRange?: ContinuiousRange;\n    // discreteRange?: DiscreteRange;\n}\n\nexport interface ValueColorSpecification {\n    values: ValueSpecification;\n    colors: Color[];\n}\n\nexport interface ColorSpecification {\n    single_color?: SingleColorSpecification;\n    category_color?: CategoryColorSpecification;\n}\n\nexport enum ScaleFunc {\n    Linear = <any>'linear',\n    Sqrt = <any>'sqrt',\n    log = <any>'log',\n}\n\nexport const DefaultFillColor: Color = [140, 170, 180, 90];\nexport const DefaultStrokeColor: Color = [200, 200, 200, 90];\n\nexport enum BaseMap {\n    Light = 'Light',\n    Dark = 'Dark',\n    Satelite = 'Satelite',\n    Terrain = 'Terrain',\n    Streets = 'Streets',\n    CartoDBPositron = 'CartoDBPositron',\n    CartoDBVoyager = 'CartoDBVoyager',\n    CartoDBDarkMatter = 'CartoDBDarkMatter',\n    Custom = 'Custom',\n}\n\nexport enum Unit {\n    pixels = 'pixels',\n    meters = 'meters',\n}\n\nexport const DefaultPolyonStyle: PolygonStyle = {\n    fill: { single_color: { color: DefaultFillColor } },\n    stroke: { single_color: { color: DefaultStrokeColor } },\n    stroke_width: 3,\n    opacity: 1,\n    stroke_units: Unit.pixels,\n    elevation: null,\n};\n\nexport const DefaultPointStyle: PointStyle = {\n    fill: { single_color: { color: DefaultFillColor } },\n    size: 20,\n    stroke: { single_color: { color: DefaultStrokeColor } },\n    stroke_width: 3,\n    opacity: 1,\n    stroke_units: Unit.pixels,\n    size_units: Unit.pixels,\n};\n\nexport const DefaultLineStyle: LineStyle = {\n    stroke: { single_color: { color: DefaultStrokeColor } },\n    stroke_width: 3,\n    opacity: 1,\n};\n\nexport interface PointStyle {\n    fill: ColorSpecification;\n    size: number;\n    stroke: ColorSpecification;\n    stroke_width: number;\n    opacity: number;\n    size_units: Unit;\n    stroke_units: Unit;\n}\n\nexport interface PolygonStyle {\n    fill: ColorSpecification;\n    stroke: ColorSpecification;\n    stroke_width: number;\n    opacity: number;\n    stroke_units: Unit;\n    elevation: ValueSpecification | null;\n}\n\nexport interface LineStyle {\n    stroke: ColorSpecification;\n    stroke_width: number;\n    opacity: number;\n}\n\nexport interface QuerySource {\n    Query: string;\n}\n\nexport interface DatasetSource {\n    Dataset: string;\n}\n\nexport interface RawQuerySource {\n    RawQuery: string;\n}\nexport interface GeoJSONSource {\n    url: string;\n}\n\nexport type LayerSource =\n    | QuerySource\n    | DatasetSource\n    | RawQuerySource\n    | GeoJSONSource;\n\nexport type LayerStyle = {\n    Point?: PointStyle;\n    Polygon?: PolygonStyle;\n    Line?: LineStyle;\n};\n\nexport interface Layer {\n    source: LayerSource;\n    style: LayerStyle;\n    name: string;\n    description: string;\n}\n\nexport interface MapStyle {\n    layers: Layer[];\n    center: number[];\n    zoom: number;\n    base_map: BaseMap;\n}\n\nexport const DefaultMapStyle: MapStyle = {\n    center: [-74.006, 40.7128],\n    zoom: 13,\n    base_map: BaseMap.Light,\n    layers: [],\n};\n\nexport interface Dashboard {\n    name: string;\n    id: string;\n    description: string;\n    owner_id: string;\n    public: boolean;\n    map_style: MapStyle;\n    created_at: Date;\n    updated_at: Date;\n}\n\nexport interface CreateDashboardDTO {\n    name: string;\n    description: string;\n    public: boolean;\n    map_style: MapStyle;\n}\n\nexport interface ValueCount {\n    name: string;\n    count: number;\n}\n\nexport interface UpdateDashboardDTO {\n    name?: string;\n    description?: string;\n    public?: boolean;\n    map_style?: MapStyle;\n}\n// export interface Token {\n//     iat: number;\n//     exp: number;\n//     username: string;\n//     id: string;\n// }\n\nexport interface LoginResponse {\n    user: User;\n    token: string;\n}\n\nexport interface SignupResponse {\n    user: User;\n    token: string;\n}\n\nconst a = axios.create({\n    baseURL:\n        !process.env.NODE_ENV ||\n        process.env.NODE_ENV === 'development'\n            ? '/api'\n            : `${window.location.origin}/api`,\n    headers: { 'Content-Type': 'application/json' },\n});\n\na.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    },\n);\n\nexport function uploadFile(\n    file: File,\n    url: string,\n    metadata?: any,\n    onProgress?: (progress: number) => void,\n) {\n    const formData = new FormData();\n\n    console.log('metadata is ', metadata);\n\n    formData.append('metadata', JSON.stringify(metadata));\n    formData.append('file', file);\n\n    const progress = (e: any) => {\n        if (onProgress) {\n            onProgress(Math.round((100 * e.loaded) / e.total));\n        }\n    };\n\n    return a.post(url, formData, {\n        headers: {\n            Content_Type: 'multipart/form-data',\n        },\n        onUploadProgress: progress,\n    });\n}\n\ntype CreateSyncDataset = {\n    name: string;\n    url: string;\n    description: string;\n    refreshInterval: number;\n};\n\nexport function createSyncDataset(syncDetails: CreateSyncDataset) {\n    return a.post('/datasets', syncDetails);\n}\n\nexport function deleteDashboard(dashboard_id: string) {\n    return a.delete(`/dashboards/${dashboard_id}`);\n}\n\nexport function deleteDataset(dataset_id: string) {\n    return a.delete(`/datasets/${dataset_id}`);\n}\n\nexport async function getProfile(): Promise<AxiosResponse<User>> {\n    return a.get('/users/profile');\n}\n\nexport async function login(\n    email: string,\n    password: string,\n): Promise<AxiosResponse<LoginResponse>> {\n    return a.post('/auth/login', { email, password });\n}\n\nexport async function signup(\n    username: string,\n    password: string,\n    email: string,\n): Promise<AxiosResponse<SignupResponse>> {\n    return a.post('/auth/signup', { email, password, username });\n}\n\nexport async function getDatasets(): Promise<\n    AxiosResponse<Dataset[]>\n> {\n    return a.get('/datasets');\n}\n\nexport async function getDataset(\n    id: string,\n): Promise<AxiosResponse<Dataset>> {\n    return a.get(`datasets/${id}`);\n}\n\nexport async function getPagedDatasetData(\n    id: string,\n    page: Page,\n): Promise<AxiosResponse<any>> {\n    return a.get(`datasets/${id}/data`, { params: page });\n}\n\nexport async function getDashboards(): Promise<\n    AxiosResponse<Dashboard[]>\n> {\n    return a.get('dashboards');\n}\n\nexport async function getDatasetColumns(\n    id: string,\n): Promise<AxiosResponse<Column[]>> {\n    return a.get(`datasets/${id}/columns`);\n}\n\nexport async function getDashboard(\n    id: string,\n): Promise<AxiosResponse<Dashboard>> {\n    return a.get(`dashboards/${id}`);\n}\n\nexport async function createDashboard(\n    newDashboard: CreateDashboardDTO,\n) {\n    return a.post('/dashboards', newDashboard);\n}\n\nexport async function updateDashboard(\n    dataset_id: string,\n    update: UpdateDashboardDTO,\n): Promise<AxiosResponse<Dashboard>> {\n    return a.put(`/dashboards/${dataset_id}`, update);\n}\n\nexport async function updateFeature(\n    dataset_id: string,\n    feature_id: string,\n    update: any,\n) {\n    return a.put(`datasets/${dataset_id}/data/${feature_id}`, update);\n}\n\nexport async function getColumnStats(\n    source: LayerSource,\n    column: Column,\n) {\n    if (Object.keys(source)[0] === 'Dataset') {\n        const datasetSource = source as DatasetSource;\n        return a.get(\n            `datasets/${datasetSource.Dataset}/columns/${\n                column.name\n            }/stats?stat=${JSON.stringify({\n                BasicStats: {\n                    no_bins: 20,\n                },\n            })}`,\n        );\n    } else {\n        throw Error(\n            'Layer source does not implement this functionality yet',\n        );\n    }\n}\nexport async function getUniqueColumnValues(\n    dataset_id: string,\n    column_name: string,\n) {\n    return a.get(\n        `datasets/${dataset_id}/columns/${column_name}/stats?stat=${JSON.stringify(\n            { ValueCounts: {} },\n        )}`,\n    );\n}\nexport async function getColumnHistogram(\n    column: Column,\n    source: LayerSource,\n    bins: number,\n) {\n    if (Object.keys(source)[0] === 'Dataset') {\n        const datasetSource = source as DatasetSource;\n        return a.get(\n            `datasets/${datasetSource.Dataset}/columns/${\n                column.name\n            }/stats?stat=${JSON.stringify({\n                Histogram: {\n                    no_bins: 20,\n                },\n            })}`,\n        );\n    } else {\n        throw Error(\n            'Layer source does not implement this functionality yet',\n        );\n    }\n}\n\n// not sure if run is the right verb here, but\n// this endpoint isn't restful anyway\nexport async function runQuery(\n    sql: string,\n    page: Page,\n): Promise<AxiosResponse<Dataset>> {\n    return a.get(`queries/run?q=${sql}`, { params: page });\n}\n\nexport default a;\n","import styled from 'styled-components';\n\nexport const AppLayout = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background-color: ${({ theme }) => theme.colors.background};\n    display: grid;\n    grid-template-columns: 60px 1fr;\n    grid-template-areas: 'nav main';\n`;\n\nexport const FlexSeperator = styled.div`\n    flex: 1;\n`;\n\nexport const NavArea = styled.nav`\n    width: 100%;\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.main};\n    grid-area: nav;\n`;\n\nexport const Page = styled.div`\n    grid-area: main;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    flex-direction: row;\n`;\nexport const PageContent = styled.div`\n    flex: 1;\n    width: 100%;\n    height: 100vh;\n`;\n\ninterface DetailsArea {\n    size?: 'small' | 'large';\n}\n\nexport const DetailsArea = styled.div<DetailsArea>`\n    width: ${({ size }) =>\n        size === undefined || size === 'small' ? '300px' : '400px'};\n    height: 100vh;\n    color: white;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    background-color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const MainArea = styled.div`\n    padding: 20px;\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const Paper = styled.div`\n    position: relative;\n    -webkit-box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3),\n        0 0 40px rgba(0, 0, 0, 0.1) inset;\n    -moz-box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3),\n        0 0 40px rgba(0, 0, 0, 0.1) inset;\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3),\n        0 0 40px rgba(0, 0, 0, 0.1) inset;\n    padding: 10px;\n    border-radius: 10px;\n    background-color: white;\n\n    :before,\n    :after {\n        content: '';\n        position: absolute;\n        z-index: -1;\n        -webkit-box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);\n        -moz-box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);\n        box-shadow: 0 0 20px rgba(0, 0, 0, 0.8);\n        top: 10px;\n        bottom: 10px;\n        left: 0;\n        right: 0;\n        -moz-border-radius: 100px / 10px;\n        border-radius: 100px / 10px;\n    }\n    :after {\n        right: 10px;\n        left: auto;\n        -webkit-transform: skew(8deg) rotate(3deg);\n        -moz-transform: skew(8deg) rotate(3deg);\n        -ms-transform: skew(8deg) rotate(3deg);\n        -o-transform: skew(8deg) rotate(3deg);\n        transform: skew(8deg) rotate(3deg);\n    }\n`;\n","import React, {\n    createContext,\n    useReducer,\n    useEffect,\n    useContext,\n} from 'react';\nimport { User, getProfile, login, signup } from 'api';\n\nenum ActionType {\n    ATTEMPT_LOGIN,\n    SIGNED_OUT,\n    SIGNED_IN,\n    ATTEMPT_SIGNUP,\n    SIGNUP_SUCCESSFUL,\n    UPDATE_USER,\n    SIGNUP_FAILED,\n}\n\ntype ATTEMPT_LOGIN = {\n    type: ActionType.ATTEMPT_LOGIN;\n};\n\ntype ATTEMPT_SIGNUP = {\n    type: ActionType.ATTEMPT_SIGNUP;\n};\n\ntype SIGNED_OUT = {\n    type: ActionType.SIGNED_OUT;\n};\n\ntype SIGNED_IN = {\n    type: ActionType.SIGNED_IN;\n};\n\ntype SIGNUP_SUCCESSFUL = {\n    type: ActionType.SIGNUP_SUCCESSFUL;\n    payload: User;\n};\n\ntype UPDATE_USER = {\n    type: ActionType.UPDATE_USER;\n    payload: User;\n};\n\ntype SIGNUP_FAILED = {\n    type: ActionType.SIGNUP_FAILED;\n    payload: string;\n};\n\ntype UserAction =\n    | ATTEMPT_LOGIN\n    | ATTEMPT_SIGNUP\n    | SIGNED_OUT\n    | SIGNED_IN\n    | SIGNUP_SUCCESSFUL\n    | SIGNUP_FAILED\n    | UPDATE_USER;\n\ninterface UserState {\n    user: User | null;\n    errors: string[];\n    attempting_signin: boolean;\n    attempting_signup: boolean;\n}\n\nconst InitalUserState: UserState = {\n    user: null,\n    errors: [],\n    attempting_signin: false,\n    attempting_signup: false,\n};\n\nconst UserContext = createContext<{\n    state: UserState;\n    dispatch: React.Dispatch<UserAction>;\n}>({\n    state: InitalUserState,\n    dispatch: () => null,\n});\n\nfunction reducer(state: UserState, action: UserAction): UserState {\n    switch (action.type) {\n        case ActionType.UPDATE_USER:\n            return { ...state, user: action.payload };\n        case ActionType.SIGNED_IN:\n            return { ...state, attempting_signin: false };\n        case ActionType.ATTEMPT_SIGNUP:\n            return { ...state, attempting_signup: true };\n        case ActionType.SIGNUP_FAILED:\n            return {\n                ...state,\n                attempting_signup: false,\n                errors: [action.payload],\n            };\n        case ActionType.SIGNED_OUT:\n            return { ...state, user: null };\n        case ActionType.SIGNUP_SUCCESSFUL:\n            return {\n                ...state,\n                user: action.payload,\n                errors: [],\n                attempting_signup: false,\n            };\n        default:\n            return state;\n    }\n}\n\nexport const useUser = () => {\n    const { state, dispatch } = useContext(UserContext);\n\n    const tryLogin = (email: string, password: string) => {\n        login(email, password).then((result) => {\n            localStorage.setItem('token', result.data.token);\n            dispatch({\n                type: ActionType.UPDATE_USER,\n                payload: result.data.user,\n            });\n        });\n    };\n\n    const trySignup = (\n        username: string,\n        password: string,\n        email: string,\n    ) => {\n        dispatch({\n            type: ActionType.ATTEMPT_SIGNUP,\n        });\n\n        signup(username, password, email)\n            .then((result) => {\n                localStorage.setItem('token', result.data.token);\n                dispatch({\n                    type: ActionType.SIGNUP_SUCCESSFUL,\n                    payload: result.data.user,\n                });\n            })\n            .catch((e) => {\n                dispatch({\n                    type: ActionType.SIGNUP_FAILED,\n                    payload: e.toString(),\n                });\n            });\n    };\n\n    const signout = () => {\n        localStorage.removeItem('token');\n        dispatch({\n            type: ActionType.SIGNED_OUT,\n        });\n    };\n\n    return { ...state, login: tryLogin, signup: trySignup, signout };\n};\n\nexport const UserProvider: React.FC = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, InitalUserState);\n\n    useEffect(() => {\n        getProfile()\n            .then((profile) => {\n                dispatch({\n                    type: ActionType.SIGNED_IN,\n                });\n                dispatch({\n                    type: ActionType.UPDATE_USER,\n                    payload: profile.data,\n                });\n            })\n            .catch((e) => {\n                console.warn('token is invalid or stale', e);\n            });\n    }, []);\n\n    return (\n        <UserContext.Provider value={{ state, dispatch }}>\n            {children}\n        </UserContext.Provider>\n    );\n};\n","import styled from 'styled-components'\n\nexport enum ButtonType{\n    Primary = 'primary',\n    Secondary = 'secondary',\n    Dissabled = 'dissables'\n}\n\ninterface ButtonProps{\n    kind?: ButtonType,\n    theme?: any\n}\n\nexport const Button = styled.button<ButtonProps>`\n    font-size:15px;\n    padding: 10px 20px;\n    font-weight:bold;\n    color:white;\n    cursor: pointer;\n    border:none;\n    background-color: ${({kind=ButtonType.Primary, theme} : ButtonProps)=>{\n        switch(kind){\n            case ButtonType.Primary:\n                return theme.colors.main;\n            case ButtonType.Secondary:\n                return theme.colors.secondary;\n            case ButtonType.Dissabled:\n                return 'lightgrey'\n        }\n    }};\n\n    :hover{\n        background-color: ${({kind=ButtonType.Primary,  theme} : ButtonProps)=>{\n            switch(kind){\n                case ButtonType.Primary:\n                    return theme.colors.mainLighter;\n                case ButtonType.Secondary:\n                    return theme.colors.secondary;\n                case ButtonType.Dissabled:\n                    return 'lightgrey'\n            }\n        }};\n    }\n`","import styled from 'styled-components';\n\nexport const Card = styled.div`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  color: white;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  padding: 20px;\n  /* color: grey; */\n`;\n","import styled from 'styled-components';\n\nconst TabHeader = styled.ul`\n    display: flex;\n    flex-direction: row;\n    padding: 0px 10px 10px 10px;\n    justify-content: space-around;\n    align-items: center;\n`;\n\nconst TabContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex:1;\n`;\nexport interface TabProps {\n    name: string;\n}\n\ninterface TabHeadProps {\n    active: boolean;\n}\n\nconst TabContent = styled.div`\n    overflow-y:hidden;\n    flex:1;\n    display:flex;\n`;\n\nconst Tab = styled.li`\n    border-bottom: ${({ active }: TabHeadProps) =>\n        active ? '2px solid' : 'none'};\n    color: white;\n    cursor: pointer;\n    background-color: ${({active})=> active ? \"#c38d9e\" : \"#eddde2\"};\n    font-weight: bold;\n    flex:1;\n    text-align:center;\n    padding: 10px;\n    font-size:15px;\n`;\n\nexport const Styles = {\n    TabContainer,\n    TabHeader,\n    Tab,\n    TabContent,\n};\n","import React, { useState } from 'react';\nimport { Styles, TabProps } from './TabStyles';\n\ninterface TabsProps {\n    onTabSelected?: (tab: string) => void;\n    activeTab?: string;\n    children?: React.ReactElement<TabProps>[];\n}\n\ninterface TabHeadProps {\n    active: boolean;\n    name: string;\n    onSelect: (name: string) => void;\n}\n\nconst TabHeader: React.FC<TabHeadProps> = ({\n    active,\n    name,\n    onSelect,\n}) => {\n    return (\n        <Styles.Tab onClick={() => onSelect(name)} active={active}>\n            {name}\n        </Styles.Tab>\n    );\n};\n\nexport const Tab: React.FC<TabProps> = ({ children, name }) => (\n    <Styles.TabContent key={name}>{children}</Styles.TabContent>\n);\n\nexport const Tabs: React.FC<TabsProps> = ({\n    onTabSelected,\n    activeTab,\n    children,\n}) => {\n    let firstTab: string | undefined = undefined;\n\n    if (children && children.length <= 1) {\n        throw new Error('Need to have at least 2 tabs');\n    } else if (children) {\n        firstTab = children[0].props.name;\n    }\n    const [internalActiveTab, setInternalActiveTab] = useState<\n        string | undefined\n    >(activeTab ? activeTab : firstTab);\n\n    const selected = (name: string) => {\n        if (onTabSelected) {\n            onTabSelected(name);\n        }\n        setInternalActiveTab(name);\n    };\n\n    const selectedTab = activeTab ? activeTab : internalActiveTab;\n    const headers = children?.map((c) => (\n        <TabHeader\n            key={c.props.name}\n            onSelect={selected}\n            active={c.props.name === selectedTab}\n            name={c.props.name}\n        />\n    ));\n\n    const activeChild = children?.find(\n        (c) => c.props.name === selectedTab,\n    );\n\n    return (\n        <Styles.TabContainer>\n            <Styles.TabHeader>{headers}</Styles.TabHeader>\n            {activeChild}\n        </Styles.TabContainer>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { uploadFile } from '../../api';\nimport { ProgressBar } from '../ProgressBar/ProgressBar';\nimport { Styles } from './UploaderStyles';\n\ntype Props = {\n    file: File;\n    url: string;\n    onDone?: () => void;\n    onFail?: (e: Error) => void;\n    metadata?: any;\n};\n\nenum UploadState {\n    PENDING,\n    IN_PROGRESS,\n    DONE,\n    FAILED,\n}\nexport const Uploader: React.FC<Props> = ({\n    file,\n    url,\n    metadata,\n    onDone,\n    onFail,\n}) => {\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [state, setState] = useState<UploadState>(\n        UploadState.PENDING,\n    );\n    useEffect(() => {\n        uploadFile(file, url, metadata, setProgress)\n            .then(() => setState(UploadState.DONE))\n            .catch((error: any) => {\n                setError(error);\n                setState(UploadState.FAILED);\n            });\n    }, []);\n    return (\n        <Styles.UploaderOuter>\n            <Styles.UploaderFilename>\n                {file.name}\n            </Styles.UploaderFilename>\n            <ProgressBar progress={progress} showPC={true} />\n        </Styles.UploaderOuter>\n    );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-row-gap: 10px;\n    grid-column-gap: 10px;\n    align-items: center;\n\n    h3 {\n        grid-column: 1 / span 2;\n        text-align: center;\n        font-weight: bold;\n    }\n    button {\n        margin-top: 20px;\n        grid-column: 1 / span 2;\n    }\n    .errorMsg{\n        color:red;\n        grid-column: 1/ span 2;\n        text-align:right;\n        font-size: 15px;\n    }\n    label {\n        justify-self: center;\n    }\n`;\n","import React, { useState } from 'react';\nimport { useUser } from '../../Contexts/UserContext';\nimport { Card } from '../Card/Card';\nimport { Redirect } from 'react-router';\n\nimport { Tabs, Tab } from '../Tabs/Tabs';\nimport { Button, ButtonType } from '../Button/Button';\nimport { Form } from '../Forms/Forms';\n\nexport const LoginSignup: React.FC = () => {\n    const [username, setUsername] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    const [email, setEmail] = useState<string>('');\n    const {\n        user,\n        errors,\n        attempting_signin,\n        attempting_signup,\n        login,\n        signup,\n    } = useUser();\n\n    const tryLogin = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        login(email, password);\n    };\n\n    const trySignup = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        signup(email, password, username);\n    };\n\n    if (user) {\n        return <Redirect to=\"/profile\" />;\n    }\n\n    return (\n        <Card>\n            <Tabs>\n                <Tab name=\"login\">\n                    <Form onSubmit={tryLogin}>\n                        <label>email</label>\n                        <input\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            type=\"text\"\n                            placeholder=\"email\"\n                        />\n                        <label>password</label>\n                        <input\n                            value={password}\n                            onChange={(e) =>\n                                setPassword(e.target.value)\n                            }\n                            type=\"password\"\n                            placeholder=\"password\"\n                        />\n                        <Button\n                            kind={ButtonType.Primary}\n                            type=\"submit\"\n                        >\n                            Login\n                        </Button>\n                    </Form>\n                </Tab>\n                <Tab name=\"signup\">\n                    <Form onSubmit={trySignup}>\n                        <label>username</label>\n                        <input\n                            value={username}\n                            onChange={(e) =>\n                                setUsername(e.target.value)\n                            }\n                            type=\"text\"\n                            placeholder=\"username\"\n                        />\n                        <label>email</label>\n                        <input\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                            type=\"text\"\n                            placeholder=\"email\"\n                        />\n                        <label>password</label>\n                        <input\n                            value={password}\n                            onChange={(e) =>\n                                setPassword(e.target.value)\n                            }\n                            type=\"password\"\n                            placeholder=\"password\"\n                        />\n                        <Button\n                            kind={ButtonType.Primary}\n                            type=\"submit\"\n                        >\n                            Signup\n                        </Button>\n                    </Form>\n                </Tab>\n            </Tabs>\n        </Card>\n    );\n};\n","import styled from 'styled-components';\nimport { PageContent } from 'Components/Layout/Layout';\n\nconst LoginSignupPage = styled(PageContent)`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    flex: 1;\n    padding: 20px;\n`;\nexport const Styles = {\n    LoginSignupPage,\n};\n","import React from 'react';\nimport { Page, Paper } from 'Components/Layout/Layout';\nimport { LoginSignup } from 'Components/LoginSignup/LoginSignup';\nimport { Styles } from './LoginSignupPageStyles';\n\nexport const LoginSignupPage: React.FC = () => {\n    return (\n        <Page>\n            <Styles.LoginSignupPage>\n                <Paper>\n                    <LoginSignup />\n                </Paper>\n            </Styles.LoginSignupPage>\n        </Page>\n    );\n};\n","import React, { useState } from 'react';\nimport { Form } from '../Forms/Forms';\nimport { createSyncDataset } from '../../api';\n\nexport const SyncDatasetForm: React.FC = () => {\n    const [name, setName] = useState('');\n    const [url, setURL] = useState('');\n    const [description, setDescription] = useState('');\n    const [refreshInterval, setRefreshInterval] = useState(60);\n\n    const [message, setMessage] = useState<string | null>(null);\n    const [error, setError] = useState<string | null>(null);\n\n    const clearForm = () => {\n        setName('');\n        setURL('');\n        setDescription('');\n        setRefreshInterval(60);\n    };\n\n    const createSync = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        createSyncDataset({\n            name,\n            url,\n            description,\n            refreshInterval,\n        })\n            .then(() => {\n                clearForm();\n                setMessage('Successfully created synced dataset!');\n            })\n            .catch((e) => {\n                setError(`Something went wrong :-( ${e.toString()}`);\n            });\n    };\n    return (\n        <Form onSubmit={createSync}>\n            <label>Name</label>\n            <input\n                type=\"text\"\n                placeholder=\"URL\"\n                value={url}\n                onChange={(e) => setURL(e.target.value)}\n            />\n            <label>URL</label>\n            <input\n                type=\"text\"\n                placeholder=\"name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n            />\n            <label>Description</label>\n            <input\n                type=\"text\"\n                placeholder=\"description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n            />\n            <label>Refresh Interval</label>\n            <input\n                type=\"number\"\n                placeholder=\"refreshInterval\"\n                value={refreshInterval}\n                onChange={(e) =>\n                    setRefreshInterval(parseInt(e.target.value))\n                }\n            />\n            <button type=\"submit\">Start syncing</button>\n            {message && <p>{message}</p>}\n            {error && <p>{error}</p>}\n        </Form>\n    );\n};\n","import styled from 'styled-components';\n\nconst ProgressBarOuter = styled.div`\n    width: 100%;\n    flex: 1;\n    height: 20px;\n    padding: 5px;\n    display: flex;\n    border: 1px solid grey;\n    border-radius: 10px;\n`;\n\ninterface ProgressBarInnerProps {\n    percent: number;\n}\n\nconst ProgressBarInner = styled.div`\n    width: ${({ percent }: ProgressBarInnerProps) => `${percent}%`};\n    height: 15px;\n    background-color: blue;\n`;\n\nconst Percent = styled.span``;\nexport const Styles = {\n    ProgressBarOuter,\n    ProgressBarInner,\n    Percent,\n};\n","import React from 'react';\nimport { Styles } from './ProgressBarStyles';\n\ntype ProgressBarProps = {\n    progress: number;\n    progressColor?: string;\n    doneColor?: string;\n    errorColor?: string;\n    showPC?: boolean;\n};\nexport const ProgressBar: React.FC<ProgressBarProps> = ({\n    showPC,\n    progress,\n    progressColor,\n    doneColor,\n    errorColor,\n}) => {\n    return (\n        <Styles.ProgressBarOuter>\n            <Styles.ProgressBarInner percent={progress} />\n            {showPC && (\n                <Styles.Percent>\n                    {progress.toPrecision(2)}%\n                </Styles.Percent>\n            )}\n        </Styles.ProgressBarOuter>\n    );\n};\n","import styled from 'styled-components';\n\nconst UploaderOuter = styled.div``;\nconst UploaderFilename = styled.div``;\nexport const Styles = {\n    UploaderOuter,\n    UploaderFilename,\n};\n","import React, { useState } from 'react';\nimport { Uploader } from '../Uploader/Uploader';\nimport { Form } from '../Forms/Forms';\n\ninterface FileUploadDetailsProps {\n    file: File;\n    onDone: ()=>void\n}\n\nexport const FileUploadDetails: React.FC<FileUploadDetailsProps> = ({\n    file,\n    onDone\n}) => {\n    const [name, setName] = useState(file.name.split('.')[0]);\n    const [description, setDescription] = useState('');\n    const [idCol, setIdCol] = useState('ogc_fid');\n    const [geomCol, setGeomCol] = useState('wkb_geometry');\n    const [startUpload, setStartUpload] = useState<boolean>(false);\n\n    const upload = () => {\n        setStartUpload(true);\n    };\n\n    const metadata = {\n        name,\n        description,\n        id_col: idCol,\n        geom_col: geomCol,\n    };\n\n    return (\n        <div>\n            {startUpload ? (\n                <Uploader\n                    url=\"/datasets\"\n                    file={file}\n                    metadata={metadata}\n                    onDone={onDone}\n                />\n            ) : (\n                <Form>\n                    <h3>{file.name}</h3>\n                    <label>name</label>\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        placeholder=\"Name\"\n                    />\n                    <label>Description</label>\n                    <input\n                        type=\"textarea\"\n                        value={description}\n                        onChange={(e) =>\n                            setDescription(e.target.value)\n                        }\n                        placeholder=\"Description\"\n                    />\n                    <label>Id Column</label>\n                    <input\n                        type=\"textarea\"\n                        value={idCol}\n                        onChange={(e) => setIdCol(e.target.value)}\n                        placeholder=\"Id column\"\n                    />\n                    <label>Geom Column</label>\n                    <input\n                        type=\"textarea\"\n                        value={geomCol}\n                        onChange={(e) => setGeomCol(e.target.value)}\n                        placeholder=\"Description\"\n                    />\n                    <label>Size</label>\n                    <p>{(file.size * 1e-6).toPrecision(2)} Mb</p>\n                    <button onClick={upload} type=\"submit\">\n                        Upload\n                    </button>\n                </Form>\n            )}\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport { FileUploadDetails } from './FileUploadDetails';\n\ninterface FileSelectorProps{\n    onDone : ()=>void\n}\n\nexport const FileSelector: React.FC<FileSelectorProps> = ({onDone}) => {\n    const [files, setFiles] = useState<FileList | null>(null);\n\n    const selectFiles = (e: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(e.target.files);\n        setFiles(e.target.files);\n    };\n    return (\n        <div>\n            {files && (\n                <ul>\n                    {Array.from(files).map((file, index) => (\n                        <FileUploadDetails onDone={onDone} key={index} file={file} />\n                    ))}\n                </ul>\n            )}\n            <input\n                onChange={selectFiles}\n                type=\"file\"\n                multiple\n                name=\"file\"\n            />\n        </div>\n    );\n};\n","import React from 'react';\nimport { Card } from '../Card/Card';\nimport { Tabs, Tab } from '../Tabs/Tabs';\nimport { SyncDatasetForm } from '../SyncDatasetForm/SyncDatasetForm';\nimport { FileSelector } from '../FileSelector/FileSelector';\n\ninterface DatasetCreationFormProps{\n    onCreated: ()=>void\n}\nexport const DatasetCreationForm: React.FC<DatasetCreationFormProps> = ({onCreated}) => {\n    return (\n        <Card>\n            <Tabs>\n                <Tab name=\"Upload Files\">\n                    <FileSelector onDone={onCreated} />\n                </Tab>\n                <Tab name=\"Link Url\">\n                    <SyncDatasetForm />\n                </Tab>\n            </Tabs>\n        </Card>\n    );\n};\n","import styled from 'styled-components';\nimport { Paper } from '../Layout/Layout';\n\nconst ListOuter = styled(Paper)`\n    width: 100%;\n`;\n\nconst List = styled.ul``;\n\nconst Row = styled.li`\n    border-bottom: 1px solid lightgrey;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding: 20px;\n    color: grey;\n\n    a {\n        margin-right: 10px;\n    }\n    :last-child {\n        border: none;\n    }\n`;\n\nexport const Styles = {\n    ListOuter,\n    List,\n    Row,\n};\n","import React from 'react'\nimport {Styles} from './ListStyles'\n\nexport const Row = Styles.Row  \n\ninterface ListProps{\n    loading:boolean;\n}\nexport const List : React.FC<ListProps> = ({children,loading})=>{\n    if(loading){\n        return <h2>Loading</h2>\n    }\n    return(\n        <Styles.ListOuter>\n            <Styles.List>\n                {children}\n            </Styles.List>\n        </Styles.ListOuter>\n    )\n}","import React from 'react';\nimport { List, Row } from '../List/List';\nimport { Button, ButtonType } from '../Button/Button';\nimport { Link } from 'react-router-dom';\nimport {Dataset} from 'api'\n\ninterface DatasetListProps{\n    datasets: Dataset[],\n    loading: boolean\n}\n\nexport const DatasetList: React.FC<DatasetListProps> = ({datasets,loading}) => {\n\n    return (\n        <List loading={loading}>\n            {datasets.map((dataset) => (\n                <Row key={dataset.name}>\n                    <div>\n                        <h3>{dataset.name}</h3>\n                        <p>{dataset.description}</p>\n                    </div>\n                    <div>\n                        <Link to={`/datasets/${dataset.id}`}>\n                            <Button kind={ButtonType.Secondary}>\n                                view\n                            </Button>\n                        </Link>\n\n                        <Link to={`/datasets/${dataset.id}`}>\n                            <Button kind={ButtonType.Primary}>\n                                delete\n                            </Button>\n                        </Link>\n                    </div>\n                </Row>\n            ))}\n        </List>\n    );\n};\n","import styled from 'styled-components';\nimport { PageContent } from 'Components/Layout/Layout';\n\nconst DatasetsPage = styled(PageContent)`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    flex: 1;\n    padding: 20px;\n`;\n\nexport const Styles = {\n    DatasetsPage,\n};\n","import { useState, useEffect } from 'react';\nimport { getDatasets, Dataset } from 'api';\n\nexport const useDatasets = () => {\n    const [datasets, setDatasets] = useState<Dataset[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const refreshDatasets = ()=>{\n        setLoading(true);\n        console.log('refreshing in hook ')\n        getDatasets()\n            .then((result) => {\n                setDatasets(result.data);\n            })\n            .catch((e) => {\n                setError(e.toString());\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    } ;\n    useEffect(()=> refreshDatasets(), [])\n    return { datasets, error, loading, refreshDatasets };\n};\n","import React from 'react';\nimport { DatasetCreationForm } from 'Components/DatasetCreationForm/DatasetCreationForm';\nimport { DatasetList } from 'Components/DatasetList/DatasetList';\nimport { Styles } from './DatasetsPageStyles';\nimport { FlexSeperator } from 'Components/Layout/Layout';\nimport { Button, ButtonType } from 'Components/Button/Button';\nimport {useDatasets} from 'Hooks/useDatasets'\n\nimport { Page, DetailsArea } from 'Components/Layout/Layout';\n\nexport const DatasetsPage: React.FC = () => {\n    const {datasets,loading, refreshDatasets} = useDatasets()\n\n    return (\n        <Page>\n            <DetailsArea>\n                <h1>Datasets</h1>\n                <FlexSeperator />\n                <Button kind={ButtonType.Primary}>\n                    Add Datasets\n                </Button>\n            </DetailsArea>\n            <Styles.DatasetsPage>\n                <DatasetList datasets={datasets} loading={loading}/>\n                <DatasetCreationForm onCreated={()=>refreshDatasets()} />\n            </Styles.DatasetsPage>\n        </Page>\n    );\n};\n","import React from 'react';\nimport { useDashboards } from '../../Hooks/useDashboards';\nimport { List, Row } from '../List/List';\nimport {Dashboard} from 'api'\nimport { Button, ButtonType } from '../Button/Button';\nimport { Link } from 'react-router-dom';\n\ninterface DashboardListProps  {\n    dashboards: Dashboard[],\n    loading: boolean,\n    onDelete?: (dashboard_id: string) => void \n}\nexport const DashboardList: React.FC<DashboardListProps> = ({dashboards,loading, onDelete}) => {\n   \n    const deleteDashboard =(dashboard_id : string)=>{\n        if(onDelete){\n            onDelete(dashboard_id)\n        }\n    }\n\n    return (\n        <List loading={loading}>\n            {dashboards.map((dashboard) => (\n                <Row key={dashboard.name}>\n                    <div>\n                        <h3>{dashboard.name}</h3>\n                        <p>{dashboard.description}</p>\n                    </div>\n                    <div>\n                        <Link to={`/dashboard/${dashboard.id}`}>\n                            <Button kind={ButtonType.Secondary}>\n                                view\n                            </Button>\n                        </Link>\n                            {onDelete && \n                                <Button onClick={()=>deleteDashboard(dashboard.id)} kind={ButtonType.Primary}>\n                                    delete\n                                </Button>\n                            }\n                    </div>\n                </Row>\n            ))}\n        </List>\n    );\n};\n","import styled from 'styled-components';\nimport { PageContent } from 'Components/Layout/Layout';\n\nconst DashboardsPage = styled(PageContent)`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    flex: 1;\n    padding: 20px;\n`;\n\nexport const Styles = {\n    DashboardsPage,\n};\n","import React from 'react';\nimport { Paper } from '../Layout/Layout';\nimport { Form } from '../Forms/Forms';\nimport { Button, ButtonType } from '../Button/Button';\n\nimport {\n    createDashboard,\n    CreateDashboardDTO,\n    DefaultMapStyle,\n} from '../../api';\nimport { useForm } from 'react-hook-form';\n\ninterface NewDashboardProps {\n    onCreated?: () => void;\n}\n\nexport const NewDashboard: React.FC<NewDashboardProps> = ({\n    onCreated\n}) => {\n    const { register, handleSubmit, errors } = useForm();\n\n    const attemptCreateDashboard = (\n        newDashboard: CreateDashboardDTO,\n    ) => {\n        newDashboard.map_style = DefaultMapStyle;\n        console.log(newDashboard);\n        createDashboard(newDashboard)\n            .then((result) => {\n                if(onCreated){\n                    console.log(\"running on created\")\n                    onCreated()\n                }\n                console.log('Gor dashboard ', result.data);\n            })\n            .catch((e) => {\n                console.log('Failed to create dashboard ', e);\n            });\n    };\n\n    return (\n        <Paper>\n            <Form onSubmit={handleSubmit(attemptCreateDashboard)}>\n                <label>Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"name\"\n                    ref={register({ required: true })}\n                />\n                {errors.name && errors.name.type === 'required' && (\n                    <p className=\"errorMsg\">Name is required.</p>\n                )}\n                <label>Description</label>\n                <input\n                    type=\"text\"\n                    name=\"description\"\n                    placeholder=\"dashboard description\"\n                    ref={register({ required: true, minLength: 6 })}\n                />\n                {errors.description &&\n                    errors.description.type === 'required' && (\n                        <p className=\"errorMsg\">\n                            Description is required.\n                        </p>\n                    )}\n                {errors.description &&\n                    errors.description.type === 'minLength' && (\n                        <p className=\"errorMsg\">\n                            Description should be longer.\n                        </p>\n                    )}\n                <label>Public</label>\n                <input\n                    type=\"checkbox\"\n                    name=\"public\"\n                    placeholder=\"dashboard description\"\n                    ref={register}\n                />\n\n                <Button type=\"submit\" kind={ButtonType.Primary}>\n                    Create\n                </Button>\n            </Form>\n        </Paper>\n    );\n};\n","import { useState, useEffect } from 'react';\nimport { getDashboards, Dashboard, deleteDashboard } from '../api';\n\nexport function useDashboards() {\n    const [loading, setLoading] = useState(false);\n    const [dashboards, setDashboards] = useState<Dashboard[]>([]);\n    const [error, setError] = useState<string | null>(null);\n\n    const refreshDashboards =  ()=> {\n        setLoading(true);\n        getDashboards()\n            .then((dashboards) => {\n                setDashboards(dashboards.data);\n            })\n            .catch((e) => setError(e.toString()))\n            .finally(() => setLoading(false));\n    };\n\n    const deleteDash =(dashboard_id: string)=>{\n        deleteDashboard(dashboard_id).then(()=>{\n            refreshDashboards();\n        })\n        .catch(e=> setError(e.toString()))\n    }\n\n    useEffect(()=> refreshDashboards(), [])\n\n    return { loading, dashboards, error, refreshDashboards, deleteDashboard:deleteDash};\n}\n","import React from 'react';\nimport {\n    Page,\n    DetailsArea,\n    FlexSeperator,\n} from 'Components/Layout/Layout';\nimport { DashboardList } from 'Components/DashboardList/DashboardList';\nimport { Styles } from './DashboardsPageStyles';\nimport { NewDashboard } from 'Components/NewDashboard/NewDashboard';\nimport { useDashboards } from 'Hooks/useDashboards'\n\nexport const DashboardsPage: React.FC = () => {\n    const {dashboards,loading, refreshDashboards, deleteDashboard} = useDashboards();\n\n    return (\n        <Page>\n            <DetailsArea>\n                <h1>Dashboards</h1>\n                <FlexSeperator />\n            </DetailsArea>\n            <Styles.DashboardsPage>\n                <DashboardList onDelete={dashboard_id =>deleteDashboard(dashboard_id)} dashboards={dashboards} loading={loading} />\n                <NewDashboard onCreated={()=>refreshDashboards()}/>\n            </Styles.DashboardsPage>\n        </Page>\n    );\n};\n","import {useState, useEffect} from 'react'\nimport api from 'api'\n\nenum SortDirection{\n    ASSCENDING ='asc',\n    DESCENDING ='desc'\n}\n\nexport type DataSource={\n    datasetId?: string,\n    sql?: string\n}\n\nconst formatUrlWith = (source:DataSource, page: number, perPage: number, sortDirection: SortDirection, sortCol: string | null)=>{\n    let url ='';\n\n    if(source.datasetId){\n        url = `datasets/${source.datasetId}/data`;\n    }\n    else if (source.sql){\n        url = `queries/run`;\n    }\n\n    const params = new URLSearchParams()\n\n    if(sortCol){\n        params.append('sort', `${sortCol}`)\n        params.append('sort', `${sortDirection ? sortDirection : SortDirection.DESCENDING}`)\n    }\n\n    params.append(\"limit\", `${perPage}`)\n    params.append(\"offset\", `${page*perPage}`)\n\n    if(source.sql){\n        params.append(\"q\",source.sql)\n    }\n    return `${url}?${params.toString()}` \n}\n\ntype SourceParams = {\n    perPage: number\n}\n\nexport const useDataSource = (source:DataSource, params?:SourceParams)=>{\n    const [page,setPage] = useState<number>(0);\n    const [sortCol, setSortCol] = useState<string |null>(null);\n    const [sortDirection, setSortDirection] = useState<SortDirection|null>(null);\n    const [data, setData] = useState<any|null>(null)\n    const [total,setTotal] = useState<number| null>(null)\n    const [loading, setLoading] = useState<boolean>(false)\n    const [error, setError] = useState<string| null> (null)\n    const [pages, setPages] = useState<number |null>(null)\n\n    const perPage = params?.perPage ? params.perPage : 40\n    \n    useEffect(()=>{\n        console.log(source, params, page, sortCol, sortDirection )\n        setLoading(true)\n        api.get(formatUrlWith(source, page ? page : 1 ,perPage, sortDirection ? sortDirection : SortDirection.ASSCENDING, sortCol))\n        .then( (response : any) =>{\n            setData(response.data.data),\n            setTotal(response.data.metadata.total)\n            setPages(Math.ceil(response.data.metadata.total / perPage))\n            setLoading(false)\n        })\n    },[JSON.stringify(source),page,perPage])\n\n    return {data,error, loading, total, page, pages, setPage, sortCol, setSortCol, sortDirection,setSortDirection}\n}","import { useState, useEffect } from 'react';\nimport { Dataset, getDataset, Page, getPagedDatasetData } from 'api';\n\nexport const useDataset = (id: string) => {\n    const [dataset, setDataset] = useState<Dataset | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n\n    useEffect(() => {\n        setLoading(true);\n        getDataset(id)\n            .then((result) => setDataset(result.data))\n            .catch((e) => setError(e.toString()))\n            .finally(() => setLoading(false));\n    }, [id]);\n\n    return { dataset, error, loading };\n};\n\nexport const useDatasetPagedResults = (\n    id: string | null | undefined,\n    page: Page,\n) => {\n    const [data, setData] = useState<any>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (id) {\n            getPagedDatasetData(id, page)\n                .then((result) => setData(result.data))\n                .catch((e) => setError(e.toString()))\n                .finally(() => setLoading(false));\n        } else {\n            setData([]);\n            setLoading(false);\n            setError(null);\n        }\n    }, [id, page.limit, page.offset]);\n\n    return { data, error, loading };\n};\n","import React, {\n    createContext,\n    useReducer,\n    useEffect,\n    useContext,\n} from 'react';\nimport {\n    Dashboard,\n    getDashboard,\n    BaseMap,\n    updateDashboard,\n    UpdateDashboardDTO,\n    Layer,\n    LayerStyle,\n} from 'api';\nimport { useDebouncedEffect } from 'Hooks/useDebounceEffect';\n\nenum ActionType {\n    START_LOADING,\n    LOADING_DONE,\n    SAVING_STARTED,\n    SAVING_DONE,\n    SET_DASHBOARD,\n    SET_ERROR,\n    SET_BASEMAP,\n    ADD_LAYER,\n    SHOW_NEW_LAYER_MODAL,\n    HIDE_NEW_LAYER_MODAL,\n    UPDATE_LAYER_STYLE,\n}\n\ntype SET_LOADING_STARTED = {\n    type: ActionType.START_LOADING;\n};\n\ntype UPDATE_LAYER_STYLE = {\n    type: ActionType.UPDATE_LAYER_STYLE;\n    payload: {\n        name: string;\n        style: LayerStyle;\n    };\n};\n\ntype SET_LOADING_DONE = {\n    type: ActionType.LOADING_DONE;\n};\n\ntype SHOW_NEW_LAYER_MODAL = {\n    type: ActionType.SHOW_NEW_LAYER_MODAL;\n};\n\ntype HIDE_NEW_LAYER_MODAL = {\n    type: ActionType.HIDE_NEW_LAYER_MODAL;\n};\n\ntype SET_SAVING_STARTED = {\n    type: ActionType.SAVING_STARTED;\n};\n\ntype SET_SAVING_DONE = {\n    type: ActionType.SAVING_DONE;\n};\n\ntype SET_ERROR = {\n    type: ActionType.SET_ERROR;\n    payload: string;\n};\n\ntype SET_DASHBOARD = {\n    type: ActionType.SET_DASHBOARD;\n    payload: Dashboard;\n};\n\ntype SET_BASEMAP = {\n    type: ActionType.SET_BASEMAP;\n    payload: BaseMap;\n};\ntype ADD_LAYER = {\n    type: ActionType.ADD_LAYER;\n    payload: Layer;\n};\n\ntype DashboardBuilderAction =\n    | SET_LOADING_STARTED\n    | SET_LOADING_DONE\n    | SET_SAVING_STARTED\n    | SET_SAVING_DONE\n    | SET_ERROR\n    | SET_DASHBOARD\n    | SET_BASEMAP\n    | SHOW_NEW_LAYER_MODAL\n    | HIDE_NEW_LAYER_MODAL\n    | UPDATE_LAYER_STYLE\n    | ADD_LAYER;\n\ninterface DashboardBuilderState {\n    dashboard: Dashboard | null;\n    saving: boolean;\n    loading: boolean;\n    errors: string[];\n    newLayerModalVisible: boolean;\n}\n\nconst initalState: DashboardBuilderState = {\n    dashboard: null,\n    saving: false,\n    loading: false,\n    newLayerModalVisible: false,\n    errors: [],\n};\n\nconst DashboardBuilderContext = createContext<{\n    state: DashboardBuilderState;\n    dispatch: React.Dispatch<any>;\n}>({\n    state: initalState,\n    dispatch: () => null,\n});\n\nconst { Provider } = DashboardBuilderContext;\n\nconst addLayerToDash = (\n    dashboard: Dashboard | null,\n    layer: Layer,\n) => {\n    if (dashboard) {\n        const newDash = { ...dashboard };\n        newDash.map_style.layers = [\n            ...newDash.map_style.layers,\n            layer,\n        ];\n        return newDash;\n    } else {\n        return null;\n    }\n};\n\nconst updateLayerStyleOnDash = (\n    dashboard: Dashboard | null,\n    update: { name: string; style: LayerStyle },\n) => {\n    if (dashboard) {\n        const newDash = { ...dashboard };\n        const layers = newDash.map_style.layers;\n\n        newDash.map_style.layers = layers.map((l) =>\n            l.name == update.name\n                ? ({\n                      ...l,\n                      style: update.style,\n                  } as Layer)\n                : l,\n        );\n        return newDash;\n    } else {\n        return null;\n    }\n};\n\nconst updateBaseMap = (\n    dashboard: Dashboard | null,\n    baseMap: BaseMap,\n) => {\n    if (dashboard) {\n        const newDash = { ...dashboard };\n        newDash.map_style.base_map = baseMap;\n        return newDash;\n    } else {\n        return null;\n    }\n};\n\nfunction reducer(\n    state: DashboardBuilderState,\n    action: DashboardBuilderAction,\n) {\n    console.info('Running action ', action);\n    switch (action.type) {\n        case ActionType.ADD_LAYER:\n            return {\n                ...state,\n                dashboard: addLayerToDash(\n                    state.dashboard,\n                    action.payload,\n                ),\n            };\n        case ActionType.START_LOADING:\n            return { ...state, loading: true };\n        case ActionType.LOADING_DONE:\n            return { ...state, loading: false };\n        case ActionType.SAVING_STARTED:\n            return { ...state, saving: true };\n        case ActionType.SAVING_DONE:\n            return { ...state, saving: false };\n        case ActionType.SET_ERROR:\n            return {\n                ...state,\n                errors: [...state.errors, action.payload],\n            };\n        case ActionType.SET_DASHBOARD:\n            return { ...state, dashboard: action.payload };\n        case ActionType.SET_BASEMAP:\n            return {\n                ...state,\n                dashboard: updateBaseMap(\n                    state.dashboard,\n                    action.payload,\n                ),\n            };\n        case ActionType.SHOW_NEW_LAYER_MODAL:\n            return { ...state, newLayerModalVisible: true };\n        case ActionType.HIDE_NEW_LAYER_MODAL:\n            return { ...state, newLayerModalVisible: false };\n        case ActionType.UPDATE_LAYER_STYLE:\n            return {\n                ...state,\n                dashboard: updateLayerStyleOnDash(\n                    state.dashboard,\n                    action.payload,\n                ),\n            };\n        default:\n            return state;\n    }\n}\n\nexport const useDashboard = () => {\n    const { state, dispatch } = useContext(DashboardBuilderContext);\n\n    const updateBaseMap = (baseMap: BaseMap) => {\n        dispatch({\n            type: ActionType.SET_BASEMAP,\n            payload: baseMap,\n        });\n    };\n    const showNewLayerModal = () => {\n        dispatch({\n            type: ActionType.SHOW_NEW_LAYER_MODAL,\n        });\n    };\n    const hideNewLayerModal = () => {\n        dispatch({\n            type: ActionType.HIDE_NEW_LAYER_MODAL,\n        });\n    };\n    const updateLayerStyle = (name: string, update: LayerStyle) => {\n        dispatch({\n            type: ActionType.UPDATE_LAYER_STYLE,\n            payload: {\n                name,\n                style: update,\n            },\n        });\n    };\n    const addLayer = (layer: Layer) => {\n        dispatch({\n            type: ActionType.ADD_LAYER,\n            payload: layer,\n        });\n    };\n\n    return {\n        ...state,\n        dispatch,\n        updateBaseMap,\n        addLayer,\n        showNewLayerModal,\n        hideNewLayerModal,\n        updateLayerStyle,\n    };\n};\n\nexport const DashboardBuilderProvider: React.FC<{\n    dashboard_id: string | null;\n}> = ({ children, dashboard_id }) => {\n    const [state, dispatch] = useReducer(reducer, initalState);\n    const { dashboard } = state;\n\n    useEffect(() => {\n        console.log('State update', state);\n    }, [state]);\n\n    const updateDash = (dashboard: Dashboard | null) => {\n        if (dashboard) {\n            dispatch({\n                type: ActionType.SAVING_STARTED,\n            });\n            const update: UpdateDashboardDTO = {\n                map_style: dashboard.map_style,\n                name: dashboard.name,\n                description: dashboard.description,\n                public: dashboard.public,\n            };\n\n            updateDashboard(dashboard.id, update)\n                // .then((result) => {\n                //     dispatch({\n                //         type: ActionType.SET_DASHBOARD,\n                //         payload: result.data,\n                //     });\n                // })\n                .catch((e) => {\n                    dispatch({\n                        type: ActionType.SET_ERROR,\n                        payload: e.toString(),\n                    });\n                })\n                .finally(() => {\n                    dispatch({\n                        type: ActionType.SAVING_DONE,\n                    });\n                });\n        }\n    };\n\n    useDebouncedEffect(() => updateDash(dashboard), 1000, [\n        dashboard,\n    ]);\n\n    useEffect(() => {\n        if (dashboard_id) {\n            dispatch({\n                type: ActionType.START_LOADING,\n            });\n\n            getDashboard(dashboard_id)\n                .then((dashboardResp) => {\n                    dispatch({\n                        type: ActionType.SET_DASHBOARD,\n                        payload: dashboardResp.data,\n                    });\n                })\n                .catch((e) => {\n                    dispatch({\n                        type: ActionType.SET_ERROR,\n                        payload: e.toString(),\n                    });\n                })\n                .finally(() => {\n                    dispatch({\n                        type: ActionType.LOADING_DONE,\n                    });\n                });\n        }\n    }, [dashboard_id]);\n\n    return (\n        <Provider value={{ state, dispatch }}>{children}</Provider>\n    );\n};\n","import styled from 'styled-components';\nimport { Paper } from 'Components/Layout/Layout';\nimport {Pagination} from 'Components/Pagination/Pagination'\n\nconst Content = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 400px;\n    grid-row-gap: 20px;\n    grid-column-gap: 20px;\n    grid-template-areas:\n        'table map'\n        'details details';\n    flex-direction: row;\n    width: 100%;\n    height: 100%;\n    padding: 20px;\n`;\n\nconst Map = styled(Paper)`\n    position: relative;\n    grid-area: map;\n`;\n\nconst TablePagination = styled.div`\n    width:100%;\n    background-color:#ffffff;\n    position:absolute;\n    bottom:0px;\n    left:0px;\n    padding:20px;\n`\nconst Table = styled(Paper)`\n    max-width: 100%;\n    max-height: 100%;\n    min-width: 0px;\n    min-height: 0px;\n    grid-area: table;\n    position:relative;\n    div{\n        position: absolute;\n        bottom:0px;\n        left:0px;\n        width:100%;\n        background-color:white;\n    }\n\n    \n`;\n\nconst Details = styled(Paper)`\n    grid-area: details;\n    display:flex;\n    \n`;\n\nexport const Styles = {\n    Content,\n    Map,\n    Table,\n    Details,\n    TablePagination\n};\n","import styled from 'styled-components';\n\n\nconst DataTable = styled.div`\n    height:100%;\n    width:100%;\n    overflow:auto;\n    position:relative;\n`\ninterface TableRowProps{\n    selected? : boolean,\n    theme?: any\n}\nconst TableRow = styled.tr<TableRowProps>`\n    cursor: pointer;\n    :hover{\n        background-color: ${(props:TableRowProps)=> props.selected ? props.theme.colors.secondaryLight : 'lightgrey' }; \n    }\n    background-color: ${(props:TableRowProps)=> props.selected ? props.theme.colors.secondaryLight : 'inherit' }; \n    height:20px;\n`\n\nconst Table = styled.table`\n    background-color: white;\n    border-collapse: collapse; \n    table-layout:fixed;\n    text-align: left;\n    position: relative;\n    th {\n        background-color: ${({ theme }) => theme.colors.main};\n        color:white;\n        font-weight: bold;\n        font-size:15px;\n        position: sticky;\n        top: 0; /* Don't forget this, required for the stickiness */\n        box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.4);\n        padding:10px 20px;\n        border-right: 2px solid white;\n    }\n    td {\n        padding: 10px 20px;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        font-size:13px;\n        max-width: 200px;\n        height:20px;\n    }\n    tbody {\n    }\n`;\nexport const Styles = {\n    Table,\n    TableRow,\n    DataTable\n};\n","import React, { useMemo } from 'react';\nimport { useTable } from 'react-table';\nimport { Styles } from './DataTableStyles';\n\ninterface DataTableProps {\n    data: any[];\n    onSelect?: (row: any) => void;\n    selectedID?: any;\n    idCol:string;\n}\n\nexport const DataTable: React.FC<DataTableProps> = ({\n    data,\n    onSelect,\n    selectedID,\n    idCol\n}) => {\n    const selectRow = (row: any) => {\n        if (onSelect) {\n            onSelect(row.values);\n        }\n    };\n\n    const renderCell = (props: any) => {\n        if (!props.value) {\n            return 'Nan';\n        }\n        switch (typeof props.value) {\n            case 'undefined':\n                return 'NAN';\n            case 'object':\n                return props.value.type;\n            default:\n                return props.value;\n        }\n        return 'data';\n    };\n\n    const columns = useMemo(\n        () =>\n            data.length > 0\n                ? Object.keys(data[0]).map((c) => ({\n                      Header: c,\n                      accessor: c,\n                      Cell: renderCell,\n                  }))\n                : [],\n        [data],\n    );\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable({\n        columns,\n        data,\n    });\n\n    return (\n        <Styles.DataTable>\n            {data.length > 0 ? (\n                <Styles.Table {...getTableProps()}>\n                    <thead>\n                        {headerGroups.map((headerGroup) => (\n                            <tr\n                                {...headerGroup.getHeaderGroupProps()}\n                            >\n                                {headerGroup.headers.map((column) => (\n                                    <th {...column.getHeaderProps()}>\n                                        {column.render('Header')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                        {rows.map((row) => {\n                            prepareRow(row);\n                            return (\n                                <Styles.TableRow\n                                    selected={row.original[idCol] === selectedID}\n                                    onClick={() => selectRow(row)}\n                                    {...row.getRowProps()}\n                                >\n                                    {row.cells.map((cell) => {\n                                        return (\n                                            <td\n                                                {...cell.getCellProps()}\n                                            >\n                                                {cell.render('Cell')}\n                                            </td>\n                                        );\n                                    })}\n                                </Styles.TableRow>\n                            );\n                        })}\n                    </tbody>\n                </Styles.Table>\n            ) : (\n                <h1>No Data</h1>\n            )}\n        </Styles.DataTable>\n    );\n};\n","import styled from 'styled-components';\n\nconst QueryPane = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Buttons = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    padding: 10px 0px;\n    > * {\n        margin-left: 10px;\n    }\n`;\n\nconst ButtonsAndErrors = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst Error = styled.p`\n    color: red;\n`;\nexport const Styles = {\n    QueryPane,\n    Buttons,\n    ButtonsAndErrors,\n    Error,\n};\n","import React, { useState } from 'react';\nimport AceEditor from 'react-ace';\nimport brace from 'brace';\nimport 'brace/mode/sql';\nimport 'brace/theme/dracula';\nimport { Styles } from './QueryPaneStyles';\nimport { Button, ButtonType } from '../Button/Button';\n\ninterface QueryPaneProps {\n    table: string | null;\n    onQuery: (newQuery: any) => void;\n    error?: string | null | undefined;\n}\n\nexport const QueryPane: React.FC<QueryPaneProps> = ({\n    onQuery,\n    table,\n    error,\n}) => {\n    const [query, onChange] = useState<any>(null);\n    const defaultQuery = `select * from ${table}`;\n    const runQuery = () => {\n        onQuery(query);\n    };\n    const clearQuery = () => {\n        onQuery(null);\n    };\n\n    return (\n        <Styles.QueryPane>\n            <AceEditor\n                defaultValue={defaultQuery}\n                mode=\"postgressql\"\n                theme=\"dracula\"\n                onChange={onChange}\n                name=\"sql\"\n                fontSize=\"25px\"\n                style={{ width: '100%', flex: 1 }}\n                editorProps={{ $blockScrolling: true }}\n            />\n            <Styles.ButtonsAndErrors>\n                <Styles.Error>{error ? error : ''}</Styles.Error>\n                <Styles.Buttons>\n                    <Button\n                        onClick={clearQuery}\n                        kind={ButtonType.Secondary}\n                    >\n                        Clear\n                    </Button>\n                    <Button\n                        onClick={runQuery}\n                        kind={ButtonType.Primary}\n                    >\n                        Run\n                    </Button>\n                </Styles.Buttons>\n            </Styles.ButtonsAndErrors>\n        </Styles.QueryPane>\n    );\n};\n","import styled from 'styled-components';\nimport { Form } from 'Components/Forms/Forms';\n\nconst FeatureEditor = styled(Form)`\n    overflow-y: auto;\n    flex:1;\n`\nconst FormEntry = styled.div`\n    display:  grid;\n    grid-template-columns:1fr 1fr ;\n    align-items:center;\n`;\n\nconst Buttons = styled.div`\n    grid-column: 2;\n    display:flex;\n    flex-direction: row;\n    justify-content:flex-end;\n    button{\n        margin-left:10px;\n    }\n`\nexport const Styles = {\n    FormEntry,\n    Buttons,\n    FeatureEditor\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, ButtonType } from 'Components/Button/Button';\nimport { Styles } from './FeatureEditorStyles';\n\ninterface FeatureEditorProps {\n    feature: any;\n    editable?: boolean;\n    onSave: (update: any) => void;\n}\nexport const FeatureEditor: React.FC<FeatureEditorProps> = ({\n    feature,\n    editable = false,\n    onSave,\n}) => {\n    const [editableFeature, setEditableFeature] = useState<\n        any | null | undefined\n    >(null);\n\n    useEffect(() => {\n        setEditableFeature(feature);\n    }, [feature]);\n\n    const dirty =\n        JSON.stringify(editableFeature) !== JSON.stringify(feature);\n\n    const save = () => {\n        if (onSave) {\n            onSave(save);\n        }\n    };\n\n    const discard = () => {\n        setEditableFeature({ ...feature });\n    };\n\n    const updateField = (variable: string) => {\n        return (e: any) => {\n            const newVal = e.target.value;\n            setEditableFeature({\n                ...editableFeature,\n                [variable]: newVal,\n            });\n        };\n    };\n    \n    if(!feature){\n        return <h3>Select a feature to view and edit</h3>\n    }\n\n    return (\n        <Styles.FeatureEditor>\n            {Object.entries(\n                editableFeature ? editableFeature : feature,\n            ).map(([name, value]) => (\n                <Styles.FormEntry key={name}>\n                    <label>{name}</label>\n                    {editable ? (\n                        <input\n                            type=\"text\"\n                            onChange={updateField(name)}\n                            value={value as any}\n                        />\n                    ) : (\n                        <p>value</p>\n                    )}\n                </Styles.FormEntry>\n            ))}\n            {dirty && (\n                <Styles.Buttons>\n                    <Button type=\"submit\" onClick={save}>\n                        Save\n                    </Button>\n                    <Button\n                        onClick={discard}\n                        kind={ButtonType.Secondary}\n                        type=\"submit\"\n                    >\n                        Discard\n                    </Button>\n                </Styles.Buttons>\n            )}\n        </Styles.FeatureEditor>\n    );\n};\n","import React from 'react'\nimport ReactPaginate from 'react-paginate'\nimport styled from 'styled-components'\n\ninterface PaginationProps {\n    page:number,\n    pages:number,\n    onPageChange: (page:number)=>void  \n}\n\nconst Wrapper = styled.div`\n    ul{\n        display: flex;\n        justify-content: center;\n\n        li{\n            color:black;\n            margin: 0px 5px;\n            cursor: pointer;\n        }\n        .active-page{\n            font-weight: 700\n        }\n    }\n`\n\nexport const Pagination: React.FC<PaginationProps> = ({page,pages,onPageChange})=>{\n    return(\n        <Wrapper>        \n            <ReactPaginate\n                pageCount={pages}\n                pageRangeDisplayed={5}\n                marginPagesDisplayed={3}\n                forcePage={page}\n                onPageChange ={(page)=> onPageChange(page.selected)}\n                activeClassName={\"active-page\"}\n            />\n        </Wrapper>\n    )\n}","import styled from 'styled-components'\n\ninterface HoverProps{\n    x: number,\n    y: number,\n    theme:any\n}\n\nconst HoverToolTip = styled.div<HoverProps>`\n    position: absolute;\n    top: ${({y})=> y}px;\n    left: ${(({x})=>x)}px;\n    background-color: ${({theme})=> theme.colors.secondary} ;\n    padding:20px;\n    color:white;\n    z-index:10;    \n    transform:translate(-50%, 0 );\n`\n\nconst PropertiesTable = styled.table`\n    width:100%;\n`\n\nconst PropertyName = styled.td`\n    text-align: left;\n    font-weight: 700;\n`\n\nconst PropertyVal= styled.td`\n    text-align:right;\n\n`\nconst Property = styled.tr`\n\n`\n\nexport const Styles ={\n    HoverToolTip,\n    PropertiesTable,\n    PropertyName,\n    PropertyVal,\n    Property\n\n}","import React from 'react'\nimport {Styles} from './HoverToolTipStyles'\n\ninterface HoverToolTip{\n    x:number,\n    y:number,\n    info: any\n}\n\nexport const HoverToolTip: React.FC<HoverToolTip>= ({x,y,info})=>{\n    console.log(\"tool tip \", x,y,info)\n    return(\n        <Styles.HoverToolTip x={x} y={y}>\n            <Styles.PropertiesTable>\n                <tbody>\n                {Object.entries(info).map((kv: [string, any])=>(\n                    <Styles.Property>\n                        <Styles.PropertyName>{kv[0]}</Styles.PropertyName>\n                        <Styles.PropertyVal>{kv[1]}</Styles.PropertyVal>\n                    </Styles.Property>\n                 ))}\n    </tbody>\n            </Styles.PropertiesTable>\n                                 </Styles.HoverToolTip>\n    )\n}","import React, { useRef, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useDataset } from 'Hooks/useDataset';\nimport { useDataSource } from 'Hooks/useDataSource';\nimport { Styles } from './DatasetViewPageStyles';\nimport DeckGL from '@deck.gl/react';\nimport { MVTLayer } from '@deck.gl/geo-layers';\nimport { StaticMap } from 'react-map-gl';\nimport { DataTable } from 'Components/DataTable/DataTable';\nimport { QueryPane } from 'Components/QueryPane/QueryPane';\nimport { Tabs, Tab } from 'Components/Tabs/Tabs';\nimport { FeatureEditor } from 'Components/FeatureEditor/FeatureEditor';\nimport { Pagination } from 'Components/Pagination/Pagination';\n\n// import * as d3 from 'd3';\n\nimport {\n    Page,\n    PageContent,\n    DetailsArea,\n    FlexSeperator,\n} from 'Components/Layout/Layout';\nimport { HoverToolTip } from 'Components/HoverToolTip/HoverToolTip';\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\ninterface ParamTypes {\n    id: string;\n}\n\nconst INITIAL_VIEW_STATE = {\n    longitude: -74.006,\n    latitude: 40.7128,\n    zoom: 10,\n    pitch: 0,\n    bearing: 0,\n};\n\nconst makeMvtLayer = (data: string | null, options = {}) => {\n    if (data) {\n        return new MVTLayer({\n            data: data,\n            // @ts-ignore\n            getLineColor: [255, 0, 0, 255],\n            getLineWidth: 1,\n            lineWidthUnits: 'pixels',\n            getFillColor: [226, 125, 96, 200],\n            getBorderColor: [200, 200, 200],\n            getRadius: 40,\n            stroked: true,\n            pickable: true,\n            autoHighlight: true,\n            highlightColor: [200, 100, 200, 200],\n            radiusUnits: 'pixels',\n            ...options,\n        });\n    }\n\n    return null;\n};\n\nexport const DatasetViewPage: React.FC = () => {\n    // DatasetViewPage-specific concerns\n    const { id } = useParams<ParamTypes>();\n    const [sqlString, setSQLQuery] = useState<any>(null); // this should go into useDataset\n    const [selectedRow, setSelectedRow] = useState<any>(null); // this should go into useDataset\n    const [selectedTab, setSelectedTab] = useState<any>('Query');\n    const [hoverInfo, setHoverInfo] = useState<any>(null);\n    const perPage = 100;\n\n    console.log('Hover info ', hoverInfo);\n\n    const {\n        dataset,\n        loading: datasetLoading,\n        error: datasetError,\n    } = useDataset(id);\n\n    const dataQueryStrategy = sqlString\n        ? { sql: sqlString }\n        : { datasetId: id };\n\n    const {\n        data,\n        loading: dataLoading,\n        error,\n        pages,\n        page,\n        setPage,\n    } = useDataSource(dataQueryStrategy, { perPage });\n\n    if (datasetLoading) {\n        return <div>LOADING...</div>;\n    }\n\n    const dataLayerEndpoint = sqlString\n        ? `${window.origin}/api/tiler/{z}/{x}/{y}?q=${sqlString}`\n        : `${window.origin}/api/tiler/dataset/${id}/{z}/{x}/{y}`;\n    const layer = makeMvtLayer(dataLayerEndpoint);\n\n    //TODO implement this\n    const updateSelectedFeature = (update: any) => {\n        // updateFeature(id, update)\n    };\n\n    const selectFeature = (feature: any) => {\n        setSelectedRow(feature);\n        setSelectedTab('Feature');\n    };\n    const mapClicked = (info: any, event: any) => {\n        console.log('MAP CLICK ', info, event);\n        selectFeature(info.object.properties);\n    };\n\n    return (\n        <Page>\n            <DetailsArea>\n                <h2>{datasetLoading ? id : dataset?.name}</h2>\n                <p>{dataset?.description}</p>\n\n                <p>Id column :{dataset?.id_col} </p>\n                <p>Geom column : {dataset?.geom_col}</p>\n\n                <FlexSeperator />\n                <p>Created at: {dataset?.created_at}</p>\n                <p>Updated at: {dataset?.updated_at}</p>\n            </DetailsArea>\n            <PageContent>\n                {dataset && (\n                    <Styles.Content>\n                        <Styles.Table>\n                            {dataLoading ? (\n                                <h3>Loading</h3>\n                            ) : (\n                                <DataTable\n                                    data={data}\n                                    selectedID={\n                                        selectedRow\n                                            ? selectedRow[\n                                                  dataset.id_col\n                                              ]\n                                            : null\n                                    }\n                                    onSelect={selectFeature}\n                                    idCol={dataset.id_col}\n                                />\n                            )}\n\n                            {pages && (\n                                <Styles.TablePagination>\n                                    <Pagination\n                                        pages={pages!}\n                                        page={page}\n                                        onPageChange={(page) =>\n                                            setPage(page)\n                                        }\n                                    />\n                                </Styles.TablePagination>\n                            )}\n                        </Styles.Table>\n                        <Styles.Map>\n                            <DeckGL\n                                width={'100%'}\n                                height={'100%'}\n                                initialViewState={INITIAL_VIEW_STATE}\n                                layers={layer ? [layer] : ([] as any)}\n                                controller={true}\n                                onClick={mapClicked}\n                                onHover={(info: any) => {\n                                    setHoverInfo(info);\n                                }}\n                            >\n                                <StaticMap\n                                    mapboxApiAccessToken={TOKEN}\n                                    width={'100%'}\n                                    height={'100%'}\n                                    mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n                                />\n                                {hoverInfo && hoverInfo.object && (\n                                    <HoverToolTip\n                                        x={hoverInfo.x}\n                                        y={hoverInfo.y}\n                                        info={\n                                            hoverInfo.object\n                                                .properties\n                                        }\n                                    />\n                                )}\n                            </DeckGL>\n                        </Styles.Map>\n\n                        <Styles.Details>\n                            <Tabs\n                                onTabSelected={setSelectedTab}\n                                activeTab={selectedTab}\n                            >\n                                <Tab name=\"Query\">\n                                    <QueryPane\n                                        table={dataset.name}\n                                        onQuery={setSQLQuery}\n                                        error={error}\n                                    />\n                                </Tab>\n                                <Tab name=\"Feature\">\n                                    <FeatureEditor\n                                        feature={selectedRow}\n                                        onSave={updateSelectedFeature}\n                                        editable={true}\n                                    />\n                                </Tab>\n                            </Tabs>\n                        </Styles.Details>\n                    </Styles.Content>\n                )}\n            </PageContent>\n        </Page>\n    );\n};\n","import styled from 'styled-components';\nimport { PageContent } from 'Components/Layout/Layout';\n\nconst DashboardBuilderPage = styled(PageContent)`\n    flex: 1;\n`;\n\nexport const Styles = {\n    DashboardBuilderPage,\n};\n","import styled from 'styled-components'\n\nconst Map = styled.div`\n    width:100%;\n    height:100%;\n    border-radius:10px;\n`\n\nconst Stats = styled.div`\n\n`\n\nconst DashboardOuter = styled.div`\n    width:100%;\n    height:100%;\n    position: relative;\n`\n\nexport const Styles ={\n    Map,\n    Stats,\n    DashboardOuter\n}","import { useCallback, useEffect } from 'react';\n\nexport const useDebouncedEffect = (\n    effect: () => void,\n    delay: number,\n    deps: any,\n) => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const callback = useCallback(effect, deps);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            callback();\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [callback, delay]);\n};\n","import React from 'react';\nimport { Styles } from './DashboardViewerStyles';\nimport { BaseMap, Layer } from 'api';\nimport DeckGL from '@deck.gl/react';\nimport { MVTLayer } from '@deck.gl/geo-layers';\nimport { StaticMap } from 'react-map-gl';\nimport { useDashboard } from 'Contexts/DashbardBuilderContext';\nimport { ColorSpecification } from 'api';\nimport { LayerControls } from 'Components/LayerControls/LayerControls';\nimport { Dashboard } from 'api';\n\nfunction lookupBaseMapURL(basemap: BaseMap | undefined) {\n    switch (basemap) {\n        case BaseMap.CartoDBPositron:\n            return 'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json';\n        case BaseMap.CartoDBVoyager:\n            return 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json';\n        case BaseMap.CartoDBDarkMatter:\n            return 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json';\n        case BaseMap.Light:\n            return 'mapbox://styles/mapbox/light-v10';\n        case BaseMap.Dark:\n            return 'mapbox://styles/mapbox/dark-v10';\n        case BaseMap.Satelite:\n            return 'mapbox://styles/mapbox/satellite-v9';\n        case BaseMap.Terrain:\n            return 'mapbox://styles/mapbox/outdoors-v11';\n        case BaseMap.Streets:\n            return 'mapbox://styles/mapbox/streets-v11';\n        default:\n            return 'https://basemaps.cartocdn.com/gl/voyager-gl-style/style.json';\n    }\n}\n\nfunction colorSpecificationToGLSpec(color: ColorSpecification) {\n    if (color.single_color) {\n        return color.single_color.color;\n    } else if (color.category_color) {\n        const spec = color.category_color;\n        const colorSelector = (f: any) => {\n            const cat = `${f.properties[spec.column]}`;\n            const index = spec.categories.findIndex((c) => c === cat);\n            if (index >= 0) {\n                return spec.colors[index];\n            } else {\n                return spec.colors[spec.colors.length - 1];\n            }\n        };\n        return colorSelector;\n    }\n}\n\nfunction constructLayer(layer: Layer) {\n    const source = layer.source;\n    const source_id = Object.values(source)[0];\n    const styleType = Object.keys(layer.style)[0]!;\n\n    let style = {};\n    switch (styleType) {\n        case 'Polygon':\n            style = {\n                getFillColor: colorSpecificationToGLSpec(\n                    layer.style.Polygon!.fill,\n                ),\n                getLineColor: colorSpecificationToGLSpec(\n                    layer.style.Polygon!.stroke,\n                ),\n                updateTriggers: {\n                    getFillColor: [layer.style.Polygon!.fill],\n                    getLineColor: [layer.style.Polygon!.stroke],\n                },\n                lineWidthUnits: layer.style.Polygon!.stroke_units,\n                stroked: true,\n                getLineWidth: layer.style.Polygon!.stroke_width,\n                pickable: true,\n            };\n            break;\n        case 'Point':\n            console.log('size units ', layer.style.Point!.size_units);\n            style = {\n                getFillColor: colorSpecificationToGLSpec(\n                    layer.style.Point!.fill,\n                ),\n                getLineColor: colorSpecificationToGLSpec(\n                    layer.style.Point!.stroke,\n                ),\n                getLineWidth: layer.style.Point!.stroke_width,\n                getRadius: layer.style.Point!.size,\n                pickable: true,\n                radiusUnits: layer.style.Point!.size_units,\n                lineWidthUnits: layer.style.Point!.stroke_units,\n                updateTriggers: {\n                    getFillColor: [layer.style.Point!.fill],\n                    getBorderColor: [layer.style.Point!.stroke],\n                },\n            };\n            break;\n        case 'Line':\n            style = {\n                getLineColor: colorSpecificationToGLSpec(\n                    layer.style.Line!.stroke,\n                ),\n                getLineWidth: layer.style.Line!.stroke_width,\n                lineWidthUnits: 'pixels',\n                updateTriggers: {\n                    getLineColor: [layer.style.Line!.stroke],\n                },\n                pickable: true,\n            };\n            break;\n    }\n\n    return new MVTLayer({\n        id: layer.name,\n        data: `${window.origin}/api/tiler/dataset/${source_id}/{z}/{x}/{y}`,\n        ...style,\n    });\n}\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\ninterface DashboardViewerProps {\n    dashboard?: Dashboard;\n}\nexport const DashboardViewer: React.FC<DashboardViewerProps> = ({\n    dashboard: inputDashboard,\n}) => {\n    const { dashboard: providerDashboard } = useDashboard();\n    const dashboard = inputDashboard\n        ? inputDashboard\n        : providerDashboard;\n\n    const INITIAL_VIEW_STATE = {\n        longitude: -74.006,\n        latitude: 40.7128,\n        zoom: 10,\n        pitch: 0,\n        bearing: 0,\n    };\n\n    const mapStyle = dashboard?.map_style;\n    const layers: any = mapStyle\n        ? mapStyle.layers.map(constructLayer)\n        : [];\n\n    const baseMap = lookupBaseMapURL(mapStyle?.base_map);\n    console.log('Base map ', baseMap);\n\n    return (\n        <Styles.DashboardOuter>\n            <DeckGL\n                width={'100%'}\n                height={'100%'}\n                initialViewState={INITIAL_VIEW_STATE}\n                layers={layers}\n                controller={true}\n                getTooltip={({ object }: any) => {\n                    console.log('tool tip ', object);\n                    return object && object.message;\n                }}\n            >\n                <StaticMap\n                    mapboxApiAccessToken={TOKEN}\n                    width={'100%'}\n                    height={'100%'}\n                    mapStyle={baseMap}\n                />\n            </DeckGL>\n        </Styles.DashboardOuter>\n    );\n};\n","import styled from 'styled-components'\n\nconst BaseMapSelector =styled.div`\n    span{\n        color: grey;\n    }\n\n    .react-dropdown-select-content > span{\n        color:white;\n    }\n    padding: 10px;\n`\nexport const Styles={\n    BaseMapSelector\n}","import React from 'react';\nimport { Styles } from './BaseMapSelectorStyles';\nimport Select from 'react-dropdown-select';\nimport { BaseMap } from '../../api';\n\ninterface BaseMapSelectorProps {\n    baseMap: BaseMap;\n    onChange: (baseMap: BaseMap) => void;\n}\n\ntype BaseMapKey = keyof typeof BaseMap;\n\nexport const BaseMapSelector: React.FC<BaseMapSelectorProps> = ({\n    baseMap,\n    onChange,\n}) => {\n    const updateBaseMap = (\n        value: { key: string; label: BaseMap }[],\n    ) => {\n        const newBaseMap: BaseMap =\n            BaseMap[value[0].key as BaseMapKey];\n        onChange(newBaseMap);\n    };\n\n    console.log('Base map is ', BaseMap, Object.values(BaseMap));\n    const baseMapOptions = Object.entries(\n        BaseMap,\n    ).map(([key, label]) => ({ key, label }));\n    const values = [{ key: baseMap, label: BaseMap[baseMap] }];\n    return (\n        <Styles.BaseMapSelector>\n            <label>Select a basemap</label>\n            <Select\n                options={baseMapOptions}\n                values={values}\n                labelField={'label'}\n                valueField={'key'}\n                onChange={updateBaseMap}\n            />\n        </Styles.BaseMapSelector>\n    );\n};\n","import styled from 'styled-components';\n\nconst LayerList = styled.div`\n    padding: 10px;\n    flex: 1;\n    overflow-y: auto;\n`;\n\nexport const Styles = {\n    LayerList,\n};\n","import styled from 'styled-components';\n\nconst LayerControls = styled.div`\n    h3 {\n        font-size: 20px;\n        /* text-decoration:underline; */\n        font-weight: bold;\n        margin-bottom: 10px;\n        cursor: pointer;\n    }\n    padding: 10px 0px;\n    section {\n        padding: 10px 0px 0px 5px;\n    }\n`;\n\nexport const Styles = {\n    LayerControls,\n};\n","import React, {useState,useEffect} from 'react'\nimport {Column, getDatasetColumns, LayerSource, DatasetSource} from 'api'\n\nexport const  useSourceColumns = (source: LayerSource)=> {\n    const [columns, setColumns] = useState<undefined|Column[]>(undefined);\n\n    useEffect(()=>{\n        const sourceType  = Object.keys(source)[0]\n        if (sourceType == \"Dataset\"){\n            const dataset: DatasetSource = source as DatasetSource;\n            getDatasetColumns(dataset.Dataset).then(result=>{\n                setColumns(result.data)\n            })\n        }\n        else {\n            throw Error(`Source type is not implemented yet ${JSON.stringify(source)} `);\n        }\n    },[source])\n    return columns \n}","import styled from 'styled-components';\n\nconst SimpleSwitch = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n`;\n\nconst Option = styled.button<{ selected: boolean }>`\n    background: none;\n    border: none;\n    padding: 0px;\n    margin: 0px;\n    font-weight: ${({ selected }) => (selected ? 700 : 200)};\n    cursor: pointer;\n`;\nexport const Styles = {\n    SimpleSwitch,\n    Option,\n};\n","import React from 'react';\nimport { Styles } from './SimpleSwitchStyles';\n\ninterface SimpleSwitchProps {\n    selected: string;\n    options: string[];\n    onChange: (unit: string) => void;\n}\n\nexport const SimpleSwitch: React.FC<SimpleSwitchProps> = ({\n    selected,\n    options,\n    onChange,\n}) => {\n\n    console.log(\"sinple switch \", options)\n    return (\n        <Styles.SimpleSwitch>\n            {options.map( (option)=>\n                <Styles.Option\n                    onClick={() => onChange(option)}\n                    selected={selected === option}\n                >\n                   {option}\n                </Styles.Option>\n            )}\n        </Styles.SimpleSwitch>\n    );\n};\n","import styled from 'styled-components';\n\nconst Selector = styled.section`\n    padding-left: 20px;\n    border-left: 1px solid white;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    .icon {\n        margin-right: 10px;\n    }\n`;\nconst Modes = styled.p`\n    display: flex;\n    flex-direction: row;\n`;\n\nexport const Styles = {\n    Selector,\n    Header,\n    Modes,\n};\n","import styled from 'styled-components';\nimport {Styles as SelectorStyles} from 'Components/DashboardBuilderSelectorStyles'\n\n\nexport const Styles = {\n    ...SelectorStyles\n};\n\n","import {useState,useEffect} from 'react'\nimport {getUniqueColumnValues, ValueCount, LayerSource, DatasetSource} from 'api'\n\nexport function useUniqueColumnValues(source?: LayerSource, column_name?: string){\n    const [columnValues, setColumnValues] = useState<undefined | ValueCount[]>(undefined)\n\n    useEffect(()=>{\n        if(source && column_name){\n            if(Object.keys(source)[0]=='Dataset'){\n                const datasetSource = source as DatasetSource;\n\n                getUniqueColumnValues(datasetSource.Dataset,column_name).then((result)=>{\n                    console.log(\"result from querry \",result)\n                    setColumnValues(result.data.ValueCounts)\n                })\n                .catch(e=>{\n                    console.log(\"failed to get column values\",e)\n                    setColumnValues(undefined)\n                })\n            }\n            else{\n                throw Error(\"Layer source does not implement this functionality yet\")\n            }\n        }\n        else{\n            setColumnValues(undefined)\n        }\n    },[source, column_name])\n\n    return columnValues\n}","import { Styles } from './ColorSelectorStyles';\nimport React, { useState } from 'react';\nimport { CategoryColorSelector } from 'Components/ColorComponents/CategoryColorSelector/CategoryColorSelector';\nimport { SimpleColorSelector } from 'Components/ColorComponents/SimpleColorSelector/SimpleColorSelector';\nimport {\n    faPalette,\n    faAlignJustify,\n    faCalculator,\n} from '@fortawesome/free-solid-svg-icons';\nimport { Column, LayerSource, ColorSpecification } from 'api';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport enum ColorMappingTypes {\n    Value = 'value',\n    Category = 'category',\n    Simple = 'manual',\n}\n\nconst icons = {\n    value: faCalculator,\n    category: faAlignJustify,\n    manual: faPalette,\n};\n\ninterface ColorSelectorProps {\n    onUpdate: (spec: ColorSpecification) => void;\n    colorSpecification: ColorSpecification;\n    name: string;\n    availableTypes: ColorMappingTypes[];\n    columns: Column[];\n    source: LayerSource;\n}\n\nexport const ColorSelector: React.FC<ColorSelectorProps> = ({\n    name,\n    onUpdate,\n    colorSpecification,\n    availableTypes,\n    columns,\n    source,\n}) => {\n    const [activeMode, setActiveMode] = useState<ColorMappingTypes>(\n        ColorMappingTypes.Simple,\n    );\n\n    return (\n        <section>\n            <Styles.Header>\n                <label>{name}</label>\n                <Styles.Modes>\n                    {availableTypes.map((mode) => (\n                        <FontAwesomeIcon\n                            className=\"icon\"\n                            style={{\n                                cursor: 'pointer',\n                                color:\n                                    mode === activeMode\n                                        ? 'white'\n                                        : 'grey',\n                            }}\n                            icon={icons[mode]}\n                            onClick={() => setActiveMode(mode)}\n                        />\n                    ))}\n                </Styles.Modes>\n            </Styles.Header>\n            <Styles.Selector>\n                {activeMode === ColorMappingTypes.Simple && (\n                    <SimpleColorSelector\n                        spec={colorSpecification.single_color!}\n                        onUpdate={(spec) =>\n                            onUpdate({ single_color: spec })\n                        }\n                    />\n                )}\n                {activeMode === ColorMappingTypes.Category && (\n                    <CategoryColorSelector\n                        spec={colorSpecification.category_color!}\n                        onUpdate={(spec) =>\n                            onUpdate({ category_color: spec })\n                        }\n                        columns={columns}\n                        source={source}\n                    />\n                )}\n            </Styles.Selector>\n        </section>\n    );\n};\n","import styled from 'styled-components';\n\nconst ColorPaletteSelector = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    svg {\n        cursor: pointer;\n    }\n`;\nexport const Styles = {\n    ColorPaletteSelector,\n};\n","import styled from 'styled-components';\n\nconst ColorPalette = styled.div`\n    h3 {\n        color: grey;\n        font-size: 10px;\n    }\n    flex: 1;\n`;\n\nconst Colors = styled.div`\n    display: flex;\n    flex-direction: row;\n    height: 10px;\n    padding: 0px;\n`;\n\nconst Color = styled.div<{ color: string }>`\n    background-color: ${({ color }) => color};\n    height: 100%;\n    width: ${() => 100 / 8}%;\n`;\nexport const Styles = {\n    ColorPalette,\n    Colors,\n    Color,\n};\n","import { Styles } from './ColorPaletteStyles';\nimport React from 'react';\n\ninterface ColorPalette {\n    name?: string;\n    colors: string[];\n    reversed?: boolean;\n}\n\nexport const ColorPalette: React.FC<ColorPalette> = ({\n    name,\n    colors,\n}) => {\n    return (\n        <Styles.ColorPalette>\n            {name && <h3>{name}</h3>}\n            <Styles.Colors>\n                {colors.map((col: string) => (\n                    <Styles.Color color={col} key={col} />\n                ))}\n            </Styles.Colors>\n        </Styles.ColorPalette>\n    );\n};\n","import colorbrewer from 'colorbrewer';\n\nexport const getColors = (palette: string, reversed: boolean) => {\n    const colors =\n        //@ts-ignore\n        colorbrewer[palette][8];\n\n    const orderedColors = reversed\n        ? colors.slice(0).reverse()\n        : colors;\n    return orderedColors;\n};\n","import React, { useState } from 'react';\nimport { Styles } from './ColorPaletteSelectorStyles';\nimport { ColorPalette } from 'Components/ColorComponents/ColorPalette/ColorPalette';\nimport { getColors } from 'Components/ColorComponents/ColorUtils';\nimport Select from 'react-select';\nimport colorbrewer from 'colorbrewer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n    faArrowRight,\n    faArrowLeft,\n} from '@fortawesome/free-solid-svg-icons';\n\ninterface ColorPaletteSelector {\n    selectedPalette: string;\n    onPaletteSelected: (palette: string) => void;\n    reversed: boolean;\n    onOrderChange: (isReveresed: boolean) => void;\n}\nexport const ColorPaletteSelector: React.FC<ColorPaletteSelector> = ({\n    selectedPalette,\n    reversed,\n    onOrderChange,\n    onPaletteSelected,\n}) => {\n    const palette = {\n        value: selectedPalette,\n        label: selectedPalette,\n        customAbbreviation: selectedPalette,\n    };\n\n    const formatOptionLabel = ({\n        value,\n        label,\n        customAbbreviation,\n    }: {\n        value: string;\n        label: string;\n        customAbbreviation: string;\n    }) => (\n        <ColorPalette\n            name={value}\n            colors={getColors(value, reversed)}\n        />\n    );\n\n    const options = Object.keys(colorbrewer).map((col: string) => ({\n        value: col,\n        label: col,\n        customAbbreviation: col,\n    }));\n\n    //@ts-ignore\n    const SingleValue = ({ children, ...props }) => (\n        <ColorPalette\n            {...props}\n            colors={getColors(props.data.value, reversed)}\n        />\n    );\n    const reversePalette = () => {\n        onOrderChange(!reversed);\n    };\n\n    return (\n        <Styles.ColorPaletteSelector>\n            <Select\n                options={options}\n                values={palette}\n                onChange={(newPalette) =>\n                    onPaletteSelected(newPalette!.value)\n                }\n                formatOptionLabel={formatOptionLabel}\n                components={{\n                    SingleValue,\n                }}\n                styles={{\n                    container: (provided, state) => ({\n                        ...provided,\n                        flex: 1,\n                        paddingRight: '10px',\n                    }),\n                    singleValue: (provided, state) => ({\n                        ...provided,\n                        display: 'flex',\n                        alignItems: 'center',\n                    }),\n                }}\n            />\n            <FontAwesomeIcon\n                onClick={() => reversePalette()}\n                icon={reversed ? faArrowLeft : faArrowRight}\n            />\n        </Styles.ColorPaletteSelector>\n    );\n};\n","import { Checkbox } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-dropdown-select';\nimport { Column, LayerSource, CategoryColorSpecification } from 'api';\nimport { useUniqueColumnValues } from 'Hooks/useUniqueColumnValues';\nimport { ColorPaletteSelector } from 'Components/ColorComponents/ColorPaletteSelector/ColorPaletteSelector';\nimport { getColors } from 'Components/ColorComponents/ColorUtils';\nimport chroma from 'chroma-js';\n\ninterface CategoryColorSelectorProps {\n    onUpdate: (spec: CategoryColorSpecification) => void;\n    spec: CategoryColorSpecification;\n    columns?: Column[];\n    source?: LayerSource;\n}\n\nexport const CategoryColorSelector: React.FC<CategoryColorSelectorProps> = ({\n    columns,\n    source,\n    spec,\n    onUpdate,\n}) => {\n    const [colorPalette, setColorPalette] = useState<string>('BuPu');\n    const [reversed, setReversed] = useState<boolean>(false);\n\n    const [selectedColumn, setSelectedColumn] = useState<\n        Column | undefined\n    >(undefined);\n\n    useEffect(() => {\n        if (columns) {\n            setSelectedColumn(columns[0]);\n        } else {\n            setSelectedColumn(undefined);\n        }\n    }, [columns]);\n\n    const selectColumn = (column: Column[]) => {\n        setSelectedColumn(column[0]);\n    };\n\n    const columnValues = useUniqueColumnValues(\n        source,\n        selectedColumn?.name,\n    );\n\n    useEffect(() => {\n        if (columnValues && selectedColumn) {\n            onUpdate({\n                column: selectedColumn.name,\n                categories: columnValues\n                    .slice(0, 8)\n                    .map((cat) => cat.name),\n                colors: getColors(colorPalette, reversed)\n                    .slice(0, 8)\n                    .map((c: string) => [\n                        ...chroma(c).rgba().slice(0, 3),\n                        255,\n                    ]),\n            });\n        }\n    }, [columnValues, reversed, colorPalette, selectedColumn]);\n    \n    const colors = getColors(colorPalette, reversed);\n\n    return (\n        <div>\n            <label>Column</label>\n            {columns && (\n                <Select\n                    options={columns}\n                    valueField={'name'}\n                    labelField={'name'}\n                    values={[columns[0]]}\n                    onChange={selectColumn}\n                />\n            )}\n\n            <ColorPaletteSelector\n                selectedPalette={colorPalette}\n                onPaletteSelected={(palette) =>\n                    setColorPalette(palette)\n                }\n                reversed={reversed}\n                onOrderChange={setReversed}\n            />\n\n            <label>Include Nulls</label>\n\n            <Checkbox checked={false}></Checkbox>\n            {columnValues && (\n                <table style={{ width: '100%' }}>\n                    <thead>\n                        <tr>\n                            <th>Category</th>\n                            <th>Count</th>\n                            <th>Color</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {columnValues\n                            .slice(0, 8)\n                            .map((cat, index) => (\n                                <tr key={cat.name}>\n                                    <td>{cat.name}</td>\n                                    <td>{cat.count}</td>\n                                    <td\n                                        style={{\n                                            backgroundColor:\n                                                colors[index],\n                                        }}\n                                    ></td>\n                                </tr>\n                            ))}\n                        <tr>\n                            <td>Others</td>\n                            <td>\n                                {columnValues\n                                    .slice(8, -1)\n                                    .reduce(\n                                        (total, val) =>\n                                            total + val.count,\n                                        0,\n                                    )}\n                            </td>\n                            <td\n                                style={{\n                                    backgroundColor:\n                                        colors[colors.length - 1],\n                                }}\n                            ></td>\n                        </tr>\n                    </tbody>\n                </table>\n            )}\n        </div>\n    );\n};\n","import styled from 'styled-components';\nimport { Color } from 'api';\n\ninterface ColorBarProps {\n    col: Color;\n}\n\nexport const ColorBar = styled.div<ColorBarProps>`\n    border: 2px solid white;\n    background-color: ${({ col }) => `rgba(${col.join(', ')})`};\n    height: 15px;\n    cursor: pointer;\n`;\n","import styled from 'styled-components';\n\nconst SimpleColorSelector = styled.div``;\n\nexport const Styles = {\n    SimpleColorSelector,\n};\n","import React, { useState, useEffect } from 'react';\nimport { SketchPicker } from 'react-color';\nimport { ColorBar } from 'Components/ColorComponents/ColorBar/ColorBar';\nimport { Styles } from './SimpleColorSelectorStyles';\nimport { SingleColorSpecification, DefaultFillColor } from 'api';\n\ninterface SimpleColorSelector {\n    spec: SingleColorSpecification;\n    onUpdate: (color: SingleColorSpecification) => void;\n}\n\nexport const SimpleColorSelector: React.FC<SimpleColorSelector> = ({\n    spec,\n    onUpdate,\n}) => {\n    const [expand, setExpand] = useState<boolean>(false);\n\n    const updateColor = (color: any) => {\n        const rgb: number[] = Object.values(color.rgb);\n        const spec: SingleColorSpecification = {\n            color: [rgb[0], rgb[1], rgb[2], rgb[3] * 255],\n        };\n        onUpdate(spec);\n    };\n\n    useEffect(() => {\n        if (!spec) {\n            onUpdate({ color: DefaultFillColor });\n        }\n    }, [spec]);\n\n    if (!spec) {\n        return <p>Loading ...</p>;\n    }\n    const col = spec.color;\n    return (\n        <Styles.SimpleColorSelector>\n            <ColorBar\n                onClick={() => setExpand(!expand)}\n                col={spec.color}\n            />\n            {expand && (\n                <SketchPicker\n                    onChange={updateColor}\n                    color={{\n                        r: col[0],\n                        g: col[1],\n                        b: col[2],\n                        a: col[3],\n                    }}\n                />\n            )}\n        </Styles.SimpleColorSelector>\n    );\n};\n","import styled from 'styled-components';\nimport {Styles as SelectorStyles} from 'Components/DashboardBuilderSelectorStyles'\n\nexport const Styles = {\n    ...SelectorStyles\n};\n\n","import React from 'react';\nimport { VerticalBarSeries, XYPlot, XAxis, YAxis } from 'react-vis';\nimport 'react-vis/dist/style.css';\n\ninterface HistogramDatum {\n    id: string;\n    x: number;\n    y: number;\n}\n\ninterface HistogramProps {\n    data: HistogramDatum[];\n}\n\nexport const Histogram: React.FC<HistogramProps> = ({ data }) => {\n    return (\n        <XYPlot height={150} width={250}>\n            <VerticalBarSeries barWidth={2} data={data} />\n            <XAxis />\n            <YAxis />\n        </XYPlot>\n    );\n};\n","import { useState, useEffect } from 'react';\nimport {\n    Column,\n    getColumnStats,\n    LayerSource,\n    DatasetSource,\n} from 'api';\n\nexport function useBasicColumnStats(\n    column?: Column,\n    source?: LayerSource,\n) {\n    const [stats, setStats] = useState<undefined | null | any>(\n        undefined,\n    );\n\n    useEffect(() => {\n        if (source && column) {\n            getColumnStats(source, column)\n                .then((result) => {\n                    console.log('result from querry ', result);\n                    setStats(result.data.BasicStats);\n                })\n                .catch((e) => {\n                    console.log('failed to get basic stats', e);\n                    setStats(undefined);\n                });\n        } else {\n            setStats(undefined);\n        }\n    }, [source, column]);\n\n    return stats;\n}\n","import { useState, useEffect } from 'react';\nimport { Column, LayerSource, getColumnHistogram } from 'api';\n\nexport const useColumnHistogram = (\n    column: Column,\n    source: LayerSource,\n    bins: number,\n) => {\n    const [data, setData] = useState<any>(null);\n\n    useEffect(() => {\n        if (column && source && bins) {\n            getColumnHistogram(column, source, bins)\n                .then((result) => {\n                    setData(result.data.Histogram);\n                })\n                .catch((e) => {\n                    console.log(\n                        'Something went wrong getting histogram ',\n                        e,\n                    );\n                    setData(undefined);\n                });\n        }\n    }, [column, source, bins]);\n    return data;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Styles } from './NumericalSelectorStyles';\nimport { Categorizer } from 'Components/NumericalComponents/Categorizer/Categorizer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport Select from 'react-select';\n\nimport {\n    Column,\n    LayerSource,\n    NumericalCategorizationMethod,\n    ValueSpecification,\n} from 'api';\n\nexport enum ValueMappingTypes {\n    Value = 'value',\n    Simple = 'manual',\n}\n\ninterface NumericalSelectorProps {\n    columns: Column[];\n    source: LayerSource;\n    name: string;\n    valueSpecification?: ValueSpecification | null | undefined;\n    onUpdate: (value: ValueSpecification) => void;\n}\n\nexport const NumericalSelector: React.FC<NumericalSelectorProps> = ({\n    columns,\n    source,\n    name,\n    valueSpecification,\n    onUpdate,\n}) => {\n    const [\n        selectedColumn,\n        setSelectedColumn,\n    ] = useState<Column | null>(null);\n\n    const [\n        method,\n        setMethod,\n    ] = useState<NumericalCategorizationMethod>(\n        NumericalCategorizationMethod.EqualInterval,\n    );\n\n    useEffect(() => {\n        if (columns) {\n            setSelectedColumn(columns[0]);\n        } else {\n            setSelectedColumn(null);\n        }\n    }, [columns]);\n\n    const selectColumn = (column: Column | null) => {\n        setSelectedColumn(column);\n    };\n\n    const [activeMode, setActiveMode] = useState<ValueMappingTypes>(\n        ValueMappingTypes.Simple,\n    );\n\n    return (\n        <section>\n            <Styles.Header>\n                <label>{name}</label>\n                <Styles.Modes>\n                    <p\n                        className=\"icon\"\n                        onClick={() =>\n                            setActiveMode(ValueMappingTypes.Simple)\n                        }\n                        style={{\n                            cursor: 'pointer',\n                            color:\n                                activeMode == ValueMappingTypes.Simple\n                                    ? 'white'\n                                    : 'grey',\n                        }}\n                    >\n                        3\n                    </p>\n                    <FontAwesomeIcon\n                        className=\"icon\"\n                        style={{\n                            cursor: 'pointer',\n                            color:\n                                activeMode == ValueMappingTypes.Value\n                                    ? 'white'\n                                    : 'grey',\n                        }}\n                        icon={faCalculator}\n                        onClick={() =>\n                            setActiveMode(ValueMappingTypes.Value)\n                        }\n                    />\n                </Styles.Modes>\n            </Styles.Header>\n            <label>Column</label>\n            {columns && (\n                <Select\n                    options={columns}\n                    getOptionValue={(option) => option.name}\n                    getOptionLabel={(option) => option.name}\n                    values={[selectedColumn]}\n                    onChange={(col) => selectColumn(col)}\n                    styles={{\n                        option: (provided, state) => ({\n                            ...provided,\n                            color: 'black',\n                        }),\n                        control: (provided) => ({\n                            ...provided,\n                            color: 'black',\n                        }),\n                        singleValue: (provided) => ({\n                            ...provided,\n                            color: 'black',\n                        }),\n                    }}\n                />\n            )}\n            {selectedColumn && valueSpecification && (\n                <>\n                    {ValueMappingTypes.Simple && (\n                        <div>\n                            <input\n                                value={\n                                    valueSpecification.simpleValue!\n                                }\n                                type=\"number\"\n                                onChange={(e) =>\n                                    onUpdate({\n                                        simpleValue: parseFloat(\n                                            e.target.value,\n                                        ),\n                                    })\n                                }\n                            />\n                        </div>\n                    )}\n                    <Categorizer\n                        column={selectedColumn}\n                        source={source}\n                        method={method}\n                        onUpdate={setMethod}\n                    />\n                </>\n            )}\n        </section>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Histogram } from 'Components/Charts/Histogram/Histogram';\n\nimport {\n    Column,\n    NumericalCategorizationMethod,\n    LayerSource,\n    Color,\n} from 'api';\n\nimport { useBasicColumnStats } from 'Hooks/useBasicColumnStats';\nimport { useColumnHistogram } from 'Hooks/useColumnHistogram';\n\ninterface CategorizerProps {\n    column: Column;\n    source: LayerSource;\n    method: NumericalCategorizationMethod;\n    onUpdate: (method: NumericalCategorizationMethod) => void;\n}\n\nexport const Categorizer: React.FC<CategorizerProps> = ({\n    column,\n    source,\n}) => {\n    const [\n        method,\n        setMethod,\n    ] = useState<NumericalCategorizationMethod>(\n        NumericalCategorizationMethod.EqualInterval,\n    );\n\n    const histogramValues = useColumnHistogram(column, source, 10);\n    const basicStats = useBasicColumnStats(column, source);\n\n    // useEffect(() => {}, [basicStats]);\n\n    return (\n        <div>\n            <ul>\n                {Object.values(NumericalCategorizationMethod).map(\n                    (method: string) => (\n                        <button>{method}</button>\n                    ),\n                )}\n            </ul>\n            {histogramValues && (\n                <Histogram\n                    data={histogramValues.map(\n                        (hv: any, index: number) => ({\n                            id: index,\n                            x: hv.bin_mid,\n                            y: hv.freq,\n                        }),\n                    )}\n                />\n            )}\n            {basicStats && (\n                <p>\n                    {basicStats.min}- {basicStats.max}\n                </p>\n            )}\n        </div>\n    );\n};\n","import React from 'react';\nimport { Styles } from './PolygonLayerControlStyles';\nimport { SimpleSwitch } from 'Components/SimpleSwitch/SimpleSwitch';\n\nimport {\n    PolygonStyle,\n    LayerSource,\n    Column,\n    ColorSpecification,\n    Unit,\n    ValueSpecification,\n} from 'api';\n\nimport {\n    ColorSelector,\n    ColorMappingTypes,\n} from 'Components/ColorComponents/ColorSelector/ColorSelector';\n\nimport { NumericalSelector } from 'Components/NumericalComponents/NumericalSelector';\n\ninterface PolygonLayerControlProps {\n    style: PolygonStyle;\n    onChange: (update: PolygonStyle) => void;\n    columns: Column[];\n    source: LayerSource;\n}\n\nexport const PolygonLayerControl: React.FC<PolygonLayerControlProps> = ({\n    onChange,\n    style,\n    columns,\n    source,\n}) => {\n    const updateFill = (spec: ColorSpecification) => {\n        onChange({\n            ...style,\n            fill: spec,\n        });\n    };\n    const updateStroke = (spec: ColorSpecification) => {\n        onChange({\n            ...style,\n            stroke: spec,\n        });\n    };\n    const updateStrokeWidth = (stroke: number) => {\n        onChange({\n            ...style,\n            stroke_width: stroke,\n        });\n    };\n\n    const updateStrokeUnits = (unit: Unit) => {\n        onChange({\n            ...style,\n            stroke_units: unit,\n        });\n    };\n\n    const updateElevation = (elevation: ValueSpecification) => {\n        onChange({\n            ...style,\n            elevation: elevation,\n        });\n    };\n\n    return (\n        <>\n            <ColorSelector\n                name=\"Fill Color\"\n                colorSpecification={style.fill}\n                onUpdate={updateFill}\n                columns={columns}\n                source={source}\n                availableTypes={[\n                    ColorMappingTypes.Simple,\n                    ColorMappingTypes.Category,\n                    ColorMappingTypes.Value,\n                ]}\n            />\n\n            <ColorSelector\n                columns={columns}\n                source={source}\n                name=\"Stroke Color\"\n                colorSpecification={style.stroke}\n                onUpdate={updateStroke}\n                availableTypes={[\n                    ColorMappingTypes.Simple,\n                    ColorMappingTypes.Category,\n                    ColorMappingTypes.Value,\n                ]}\n            />\n\n            <section>\n                <label>Stroke Width</label>\n                <input\n                    value={style.stroke_width}\n                    type=\"number\"\n                    onChange={(e) =>\n                        updateStrokeWidth(parseFloat(e.target.value))\n                    }\n                />\n\n                <SimpleSwitch\n                    options={Object.keys(Unit)}\n                    selected={style.stroke_units as string}\n                    onChange={(unit: string) => updateStrokeUnits(unit as Unit)}\n                />\n            </section>\n\n            <NumericalSelector\n                name=\"Elevation\"\n                columns={columns}\n                source={source}\n                valueSpecification={style.elevation}\n                onUpdate={(elevation: ValueSpecification) =>\n                    updateElevation(elevation)\n                }\n            />\n        </>\n    );\n};\n","import React, { useState } from 'react';\nimport { Styles } from './LineLayerControlStyles';\nimport { Column, LineStyle, LayerSource } from 'api';\nimport { ColorSpecification } from 'api';\nimport { SimpleSwitch } from 'Components/SimpleSwitch/SimpleSwitch';\n\nimport {\n    ColorSelector,\n    ColorMappingTypes,\n} from 'Components/ColorComponents/ColorSelector/ColorSelector';\n\ninterface LineLayerControlProps {\n    style: LineStyle;\n    onChange: (update: LineStyle) => void;\n    columns: Column[];\n    source: LayerSource;\n}\n\nexport const LineLayerControl: React.FC<LineLayerControlProps> = ({\n    onChange,\n    style,\n    columns,\n    source,\n}) => {\n    const updateStroke = (spec: ColorSpecification) => {\n        onChange({\n            ...style,\n            stroke: spec,\n        });\n    };\n\n    const updateSize = (stroke_width: number) => {\n        onChange({\n            ...style,\n            stroke_width,\n        });\n    };\n    return (\n        <>\n            <ColorSelector\n                name=\"Stroke Color\"\n                colorSpecification={style.stroke}\n                onUpdate={updateStroke}\n                columns={columns}\n                source={source}\n                availableTypes={[\n                    ColorMappingTypes.Simple,\n                    ColorMappingTypes.Category,\n                ]}\n            />\n            <section>\n                <label>\n                    Width by <a>Number</a> <a>Value</a>\n                </label>\n                <input\n                    value={style.stroke_width}\n                    type=\"number\"\n                    onChange={(e) =>\n                        updateSize(parseFloat(e.target.value))\n                    }\n                />\n            </section>\n        </>\n    );\n};\n","import React, { useState } from 'react';\nimport { Column, PointStyle, Layer, LayerSource } from 'api';\nimport { ColorSpecification, Unit } from 'api';\nimport {\n    ColorSelector,\n    ColorMappingTypes,\n} from 'Components/ColorComponents/ColorSelector/ColorSelector';\nimport { SimpleSwitch } from 'Components/SimpleSwitch/SimpleSwitch';\n\ninterface PointLayerControlProps {\n    style: PointStyle;\n    onChange: (update: PointStyle) => void;\n    columns: Column[];\n    source: LayerSource;\n}\n\nexport const PointLayerControl: React.FC<PointLayerControlProps> = ({\n    onChange,\n    style,\n    columns,\n    source,\n}) => {\n    const updateFill = (spec: ColorSpecification) => {\n        onChange({\n            ...style,\n            fill: spec,\n        });\n    };\n\n    const updateStroke = (spec: ColorSpecification) => {\n        onChange({\n            ...style,\n            stroke: spec,\n        });\n    };\n\n    const updateSize = (size: number) => {\n        onChange({\n            ...style,\n            size,\n        });\n    };\n    const updateSizeUnit = (unit: Unit) => {\n        onChange({\n            ...style,\n            size_units: unit,\n        });\n    };\n\n    const updateStrokeUnit = (unit: Unit) => {\n        debugger \n        onChange({\n            ...style,\n            stroke_units: unit,\n        });\n    };\n\n    const updateStrokeWidth = (number: number) => {\n        onChange({\n            ...style,\n            stroke_width: number,\n        });\n    };\n\n    return (\n        <>\n            <ColorSelector\n                name=\"Fill Color\"\n                colorSpecification={style.fill}\n                onUpdate={updateFill}\n                columns={columns}\n                source={source}\n                availableTypes={[\n                    ColorMappingTypes.Simple,\n                    ColorMappingTypes.Category,\n                ]}\n            />\n\n            <ColorSelector\n                name=\"Stroke Color\"\n                colorSpecification={style.stroke}\n                onUpdate={updateStroke}\n                columns={columns}\n                source={source}\n                availableTypes={[\n                    ColorMappingTypes.Simple,\n                    ColorMappingTypes.Category,\n                ]}\n            />\n\n            <section>\n                <label>Stroke Width</label>\n                <input\n                    value={style.stroke_width}\n                    type=\"number\"\n                    onChange={(e) =>\n                        updateStrokeWidth(parseFloat(e.target.value))\n                    }\n                />\n                <SimpleSwitch\n                    options={Object.keys(Unit)}\n                    selected={style.stroke_units as string}\n                    onChange={(unit: string) => updateStrokeUnit(unit as Unit)}\n                />\n            </section>\n\n            <section>\n                <label>Size</label>\n                <input\n                    value={style.size}\n                    type=\"number\"\n                    onChange={(e) =>\n                        updateSize(parseFloat(e.target.value))\n                    }\n                />\n                <SimpleSwitch\n                    options={Object.keys(Unit)}\n                    selected={style.size_units as string}\n                    onChange={(unit: string) => updateSizeUnit(unit as Unit)}\n                />\n            </section>\n        </>\n    );\n};\n","import React, { useState } from 'react';\nimport {\n    Layer,\n    PolygonStyle,\n    PointStyle,\n    LayerStyle,\n    LineStyle,\n    LayerSource,\n} from 'api';\nimport { Styles } from './LayerControlsStyles';\nimport { useDashboard } from 'Contexts/DashbardBuilderContext';\nimport { useSourceColumns } from 'Hooks/useSourceColumns';\nimport { PolygonLayerControl } from 'Components/LayerControls/PolygonLayerControl/PolygonLayerControl';\nimport { LineLayerControl } from 'Components/LayerControls/LineLayerControl/LineLayerControl';\nimport { PointLayerControl } from 'Components/LayerControls/PointLayerControl/PointLayerControl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faChevronRight,\n    faChevronDown,\n} from '@fortawesome/free-solid-svg-icons';\n\ninterface LayerControlProps {\n    layer: Layer;\n}\nexport const LayerControls: React.FC<LayerControlProps> = ({\n    layer,\n}) => {\n    const [collapsed, setCollapsed] = useState<boolean>(true);\n    const sourceType = Object.keys(layer.source)[0];\n    const styleType = Object.keys(layer.style)[0];\n\n    const columns = useSourceColumns(layer.source);\n\n    const { updateLayerStyle } = useDashboard();\n\n    const updateStyle = (update: LayerStyle) => {\n        console.log('Update style is ', update);\n        updateLayerStyle(layer.name, update);\n    };\n\n    return (\n        <Styles.LayerControls>\n            <h3 onClick={() => setCollapsed(!collapsed)}>\n                <FontAwesomeIcon\n                    icon={collapsed ? faChevronDown : faChevronRight}\n                />{' '}\n                {layer.name}\n            </h3>\n            <div style={{ display: collapsed ? 'block' : 'none' }}>\n                {styleType == 'Polygon' && (\n                    <PolygonLayerControl\n                        onChange={(style) =>\n                            updateStyle({ Polygon: style })\n                        }\n                        columns={columns ? columns : []}\n                        source={layer.source}\n                        style={layer.style.Polygon!}\n                    />\n                )}\n                {styleType == 'Line' && (\n                    <LineLayerControl\n                        onChange={(style) =>\n                            updateStyle({ Line: style })\n                        }\n                        columns={columns ? columns : []}\n                        source={layer.source}\n                        style={layer.style.Line!}\n                    />\n                )}\n                {styleType == 'Point' && (\n                    <PointLayerControl\n                        onChange={(style) =>\n                            updateStyle({ Point: style })\n                        }\n                        columns={columns ? columns : []}\n                        source={layer.source}\n                        style={layer.style.Point!}\n                    />\n                )}\n            </div>\n        </Styles.LayerControls>\n    );\n};\n","import React from 'react';\nimport { Styles } from './LayerListStyles';\nimport { LayerControls } from '../LayerControls/LayerControls';\nimport { useDashboard } from '../../Contexts/DashbardBuilderContext';\n\nexport const LayerList: React.FC = () => {\n    const { dashboard } = useDashboard();\n    const layers = dashboard ? dashboard.map_style.layers : [];\n\n    return (\n        <Styles.LayerList>\n            {layers.map((layer) => (\n                <LayerControls key={layer.name} layer={layer} />\n            ))}\n        </Styles.LayerList>\n    );\n};\n","import styled from 'styled-components'\n\nconst Section = styled.section`\n    margin: 20px 0px;\n`\nconst Sections= styled.div`\n    display: flex;\n    flex-direction:column;\n`\nexport const Styles ={\n    Section,\n    Sections\n}","import styled from 'styled-components'\n\nconst AddLayerModal =styled.div`\n    padding:20px;\n    position:fixed;\n    top:50vh;\n    left:50vw;\n    transform:translate3d(-50%, -50%,0);\n    background-color:white;\n    z-index:10;\n    border:1px solid black;\n    label{\n        color:grey;\n    }\n    span{\n        color:grey;\n    }\n    button{ \n        margin-top:5px\n    }\n`\n\nexport const Styles={\n    AddLayerModal\n}","import React, { useState } from 'react';\nimport {\n    LayerStyle,\n    Layer,\n    Dataset,\n    DefaultPolyonStyle,\n    DefaultPointStyle,\n    DefaultLineStyle,\n    DatasetSource,\n} from '../../api';\nimport { useDatasets } from '../../Hooks/useDatasets';\nimport Select from 'react-dropdown-select';\nimport { Form } from '../Forms/Forms';\nimport { Styles } from './AddLayerModalStyles';\nimport { Button, ButtonType } from '../Button/Button';\n\nimport { useForm } from 'react-hook-form';\n\ninterface AddLayerModalProps {\n    onDone: (layer: Layer) => void;\n    onDismiss: () => void;\n}\n\ninterface LayerSelection {\n    label: string;\n    default: LayerStyle;\n}\n\nexport const AddLayerModal: React.FC<AddLayerModalProps> = ({\n    onDismiss,\n    onDone,\n}) => {\n    const { datasets } = useDatasets();\n    const { register, handleSubmit, errors } = useForm();\n    const [\n        selectedDataset,\n        setSelectedDataset,\n    ] = useState<Dataset | null>(null);\n    const [\n        selectedLayerType,\n        setSelectedLayerType,\n    ] = useState<LayerSelection | null>(null);\n\n    const selectLayerType = (value: LayerSelection[]) => {\n        if (value.length > 0) {\n            setSelectedLayerType(value[0]);\n        }\n    };\n\n    const selectDataset = (value: Dataset[]) => {\n        if (value.length > 0) {\n            setSelectedDataset(value[0]);\n        }\n    };\n\n    const LayerTypes = [\n        {\n            label: 'Polygon',\n            default: { Polygon: DefaultPolyonStyle },\n        },\n        { label: 'Point', default: { Point: DefaultPointStyle } },\n        { label: 'Line', default: { Line: DefaultLineStyle } },\n    ];\n\n    const attemptCreateLayer = (newLayer: any) => {\n        if (selectedDataset && selectedLayerType) {\n            const layerSource: DatasetSource = {\n                Dataset: selectedDataset.id,\n            };\n            const layer: Layer = {\n                source: layerSource,\n                style: selectedLayerType.default,\n                name: newLayer.name,\n                description: newLayer.description,\n            };\n            onDone(layer);\n            dismiss();\n        }\n    };\n    const dismiss = () => {\n        onDismiss();\n    };\n    const datasetValues = selectedDataset ? [selectedDataset] : [];\n    const layerTypeValues = selectedLayerType\n        ? [selectedLayerType]\n        : [];\n    return (\n        <Styles.AddLayerModal>\n            <Form onSubmit={handleSubmit(attemptCreateLayer)}>\n                <label>Name</label>\n                <input\n                    type=\"text\"\n                    ref={register({ required: true })}\n                    name=\"name\"\n                />\n                {errors.name && errors.name.type === 'required' && (\n                    <p className=\"errorMsg\">Name is required.</p>\n                )}\n                <label>Description</label>\n                <textarea\n                    name=\"description\"\n                    ref={register({ required: true })}\n                />\n                {errors.description &&\n                    errors.description.type === 'required' && (\n                        <p className=\"errorMsg\">\n                            Description is required.\n                        </p>\n                    )}\n\n                <label>Source</label>\n                <Select\n                    onChange={selectDataset}\n                    values={datasetValues}\n                    options={datasets}\n                    valueField={'id'}\n                    labelField={'name'}\n                />\n\n                <label>Type</label>\n                <Select\n                    onChange={selectLayerType}\n                    values={layerTypeValues}\n                    options={LayerTypes}\n                    valueField={'label'}\n                    labelField={'label'}\n                />\n\n                <Button type=\"submit\" kind={ButtonType.Primary}>\n                    Create\n                </Button>\n                <Button onClick={dismiss} kind={ButtonType.Secondary}>\n                    Cancel\n                </Button>\n            </Form>\n        </Styles.AddLayerModal>\n    );\n};\n","import React from 'react';\nimport { useDashboard } from '../../Contexts/DashbardBuilderContext';\nimport { FlexSeperator } from '../Layout/Layout';\nimport { BaseMapSelector } from '../BaseMapSelector/BaseMapSelector';\nimport { BaseMap } from '../../api';\nimport { LayerList } from '../LayerList/LayerList';\nimport { Styles } from './DashboardBuilderControllsStyles';\nimport { Button, ButtonType } from '../Button/Button';\nimport { AddLayerModal } from '../../Components/AddLayerModal/AddLayerModal';\n\nexport const DashboardBuilderControlls: React.FC = () => {\n    const {\n        loading,\n        dashboard,\n        saving,\n        errors,\n        showNewLayerModal,\n        hideNewLayerModal,\n        newLayerModalVisible,\n        updateBaseMap,\n        addLayer,\n    } = useDashboard();\n    const mapStyle = dashboard?.map_style;\n\n    const changeBaseMap = (baseMap: BaseMap) => {\n        updateBaseMap(baseMap);\n    };\n\n    console.log('SAVING IS ', saving);\n    return (\n        <>\n            {loading ? (\n                <h1>Loading...</h1>\n            ) : (\n                <>\n                    <h1>{dashboard?.name}</h1>\n                    <p>{dashboard?.description}</p>\n\n                    {mapStyle && (\n                        <Styles.Sections>\n                            <Styles.Section>\n                                <h2>BaseMap</h2>\n                                <BaseMapSelector\n                                    baseMap={mapStyle.base_map}\n                                    onChange={changeBaseMap}\n                                />\n                            </Styles.Section>\n                            <Styles.Section>\n                                <h2>Layers</h2>\n                                <LayerList />\n                                <Button\n                                    onClick={showNewLayerModal}\n                                    kind={ButtonType.Primary}\n                                >\n                                    Add layer\n                                </Button>\n                            </Styles.Section>\n                        </Styles.Sections>\n                    )}\n                </>\n            )}\n            <FlexSeperator />\n            {errors && <p>{errors.slice(0, 2).join(',')}</p>}\n            {saving && <p>Saving...</p>}\n\n            {newLayerModalVisible && (\n                <AddLayerModal\n                    onDone={addLayer}\n                    onDismiss={hideNewLayerModal}\n                />\n            )}\n        </>\n    );\n};\n","import React from 'react';\nimport { Page, DetailsArea } from 'Components/Layout/Layout';\nimport { Styles } from './DashboardBuilderPageStyles';\nimport { useParams } from 'react-router';\nimport { DashboardViewer } from 'Components/DashboardViewer/DashboardViewer';\nimport { DashboardBuilderControlls } from 'Components/DashboardBuilderControlls/DashboardBuilderControlls';\nimport { DashboardBuilderProvider } from 'Contexts/DashbardBuilderContext';\n\ninterface ParamTypes {\n    dashboard_id: string;\n}\n\nexport const DashboardBuilderPage: React.FC = () => {\n    const { dashboard_id } = useParams<ParamTypes>();\n    const updateMapLoc = (update: any) => {\n        console.log(update);\n    };\n\n    return (\n        <DashboardBuilderProvider dashboard_id={dashboard_id}>\n            <Page>\n                <DetailsArea size=\"large\">\n                    <DashboardBuilderControlls />\n                </DetailsArea>\n                <Styles.DashboardBuilderPage>\n                    <DashboardViewer />\n                </Styles.DashboardBuilderPage>\n            </Page>\n        </DashboardBuilderProvider>\n    );\n};\n","import React from 'react';\nimport { useUser } from 'Contexts/UserContext';\nimport { Redirect } from 'react-router';\nimport { Button } from 'Components/Button/Button';\n\nexport const ProfilePage: React.FC = () => {\n    const { user, attempting_signin, signout } = useUser();\n\n    if (!user && !attempting_signin) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    return (\n        <div>\n            <h1>Hi {user?.username}</h1>\n            <Button onClick={signout}>Signout</Button>\n        </div>\n    );\n};\n","import styled from 'styled-components';\n\nconst Playground = styled.div`\n    flex: 1;\n    display: grid;\n    grid-template-columns: 25vw 1fr;\n`;\n\nconst Code = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Map = styled.div``;\n\nconst Buttons = styled.div`\n    color: black;\n    text-align: right;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nexport const Styles = {\n    Playground,\n    Code,\n    Map,\n    Buttons,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Styles } from './PlaygroundStyles';\nimport AceEditor from 'react-ace';\nimport brace from 'brace';\nimport 'brace/mode/json';\nimport 'brace/theme/dracula';\nimport { DashboardViewer } from 'Components/DashboardViewer/DashboardViewer';\nimport { Dashboard, BaseMap } from 'api';\nimport { Button } from 'Components/Button/Button';\nimport {ErrorBoundary} from 'react-error-boundary'\n\nconst defaultDash: Dashboard = {\n    name: 'Tmp',\n    description: 'A teomporarry dashbaord',\n    id: '2435242342342',\n    owner_id: 'annon',\n    public: true,\n    map_style: {\n        layers: [],\n        center: [0, 0],\n        zoom: 1,\n        base_map: BaseMap.Dark,\n    },\n    created_at: new Date(),\n    updated_at: new Date(),\n};\nexport const Playground: React.FC = () => {\n    const [code, setCode] = useState<string>(\n        JSON.stringify(defaultDash, null, 2),\n    );\n\n    const [error, setError] = useState<string | null>(null);\n\n    const [spec, setSpec] = useState<Dashboard>(defaultDash);\n\n    useEffect(() => {\n        const saved = localStorage.getItem('playground');\n        if (saved) {\n            try {\n                setSpec(JSON.parse(saved));\n                setCode(saved);\n            } catch {\n                console.log('bad saved state');\n            } finally {\n                console.log('loaded state');\n            }\n        }\n    }, []);\n    const update = () => {\n        try {\n            setSpec(JSON.parse(code));\n            localStorage.setItem('playground', code);\n            setError(null);\n        } catch {\n            setError('Could not parse');\n        }\n    };\n\n    return (\n        <Styles.Playground>\n        <Styles.Code>\n                <AceEditor\n                    value={code}\n                    theme=\"dracula\"\n                    name=\"json\"\n                    fontSize=\"25px\"\n                    style={{\n                        width: '100%',\n                        flex: 1,\n                        maxHeight: '95vh',\n                    }}\n                    onChange={setCode}\n                    keyboardHandler=\"ace/keyboard/vim\"\n                ></AceEditor>\n                <Styles.Buttons>\n                    <Button onClick={update}>Submit</Button>\n                </Styles.Buttons>\n            </Styles.Code>\n            <Styles.Map>\n                <DashboardViewer dashboard={spec} />\n            </Styles.Map>\n        </Styles.Playground>\n    );\n};\n","import styled from 'styled-components';\n\nconst NavBarOuter = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  a {\n    color: white;\n  }\n  padding: 30px 10px 10px 10px;\n`;\n\nconst NavBarButton = styled.div`\n  color: white;\n  font-size: 20px;\n  text-align: center;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst NavBarSpacer = styled.div`\n  flex: 1;\n`;\n\nexport const Styles = {\n  NavBarOuter,\n  NavBarButton,\n  NavBarSpacer,\n};\n","import React from 'react';\nimport { Styles } from './NavBarStyles';\n\nexport const NavBar: React.FC = ({ children }) => {\n    return <Styles.NavBarOuter>{children}</Styles.NavBarOuter>;\n};\n\nexport const NavBarButton = Styles.NavBarButton;\nexport const NavBarSpacer = Styles.NavBarSpacer;\n","import React from 'react'\n\nexport function HomePage(){\n    return(\n        <div>\n            <h2>Welcome to Super Simple Map Maker</h2>\n        </div>\n    )\n}","import React from 'react';\nimport { LoginSignupPage } from 'Pages/LoginSignupPage/LoginSignupPage';\nimport { DatasetsPage } from 'Pages/DatasetsPage/DatasetsPage';\nimport { DashboardsPage } from 'Pages/DashboardsPage/DashboardsPage';\nimport { DatasetViewPage } from 'Pages/DatasetViewPage/DatasetViewPage';\nimport { DashboardBuilderPage } from 'Pages/DashboardBuilderPage/DashboardBuilderPage';\nimport { ModalContainer } from 'react-router-modal';\nimport { useUser } from 'Contexts/UserContext';\nimport { ProfilePage } from 'Pages/ProfilePage/ProfilePage';\nimport { Playground } from 'Pages/Playground/Playground';\nimport { AppLayout, NavArea } from './Components/Layout/Layout';\nimport {\n    NavBar,\n    NavBarButton,\n    NavBarSpacer,\n} from './Components/NavBar/NavBar';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink,\n} from 'react-router-dom';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { HomePage } from './Pages/HomePage/HomePage/HomePage';\n\nimport {\n    faMap,\n    faUser,\n    faInfo,\n    faDatabase,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './App.css';\nimport 'react-router-modal/css/react-router-modal.css';\n\nexport const App: React.FC = () => {\n    const { user } = useUser();\n    return (\n        <Router>\n            <AppLayout>\n                <NavArea>\n                    <NavBar>\n                        <NavBarButton>\n                            <NavLink to=\"/dashboards\">\n                                <FontAwesomeIcon icon={faMap} />\n                            </NavLink>\n                        </NavBarButton>\n                        <NavBarButton>\n                            <NavLink to=\"/datasets\">\n                                <FontAwesomeIcon icon={faDatabase} />\n                            </NavLink>\n                        </NavBarButton>\n                        <NavBarSpacer />\n                        <NavBarButton>\n                            <NavLink to=\"/info\">\n                                <FontAwesomeIcon icon={faInfo} />\n                            </NavLink>\n                        </NavBarButton>\n                        {user ? (\n                            <NavBarButton>\n                                <NavLink to=\"/profile\">\n                                    <FontAwesomeIcon icon={faUser} />\n                                    <p>{user.username}</p>\n                                </NavLink>\n                            </NavBarButton>\n                        ) : (\n                            <NavBarButton>\n                                <NavLink to=\"/login\">\n                                    <FontAwesomeIcon icon={faUser} />\n                                </NavLink>\n                            </NavBarButton>\n                        )}\n                    </NavBar>\n                </NavArea>\n                <Switch>\n                    <Route exact={true} path=\"/\">\n                        <HomePage />\n                    </Route>\n                    <Route exact={true} path=\"/login\">\n                        <LoginSignupPage />\n                    </Route>\n                    <Route exact={true} path=\"/profile\">\n                        <ProfilePage />\n                    </Route>\n                    <Route exact={true} path=\"/datasets\">\n                        <DatasetsPage />\n                    </Route>\n                    <Route exact={true} path=\"/dashboards\">\n                        <DashboardsPage />\n                    </Route>\n                    <Route exact={true} path=\"/playground\">\n                        <Playground />\n                    </Route>\n                    <Route\n                        exact={true}\n                        path=\"/datasets/:id\"\n                        component={DatasetViewPage}\n                    />\n                    <Route\n                        exact={false}\n                        path=\"/dashboard/:dashboard_id\"\n                        component={DashboardBuilderPage}\n                    />\n                    <Route exact={true} path=\"/info\">\n                        <h1>Info</h1>\n                    </Route>\n                </Switch>\n            </AppLayout>\n            <ModalContainer />\n        </Router>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { DefaultTheme, createGlobalStyle } from 'styled-components';\nimport reset from 'styled-reset';\n\nexport const Theme: DefaultTheme = {\n    colors: {\n        background: '#eef8f7',\n        main: '#E27D60',\n        secondaryLight: '#b4e3dd',\n        secondary: '#41B3A3',\n        bold: '#E85A4F',\n        text: '#ffffff',\n    },\n    borderRadius: '10px',\n};\n\nexport const GloablStyle = createGlobalStyle`\n    ${reset}\n    html {\n        box-sizing: border-box;\n        font-size: 100%;\n        width:100vw;\n        height:100vh;\n    };\n\n    h1{\n        font-size: 3rem;\n    }\n    h2{\n        font-size: 2rem;\n    }\n    #root{\n        width:100vw;\n        height:100vh;\n    }\n    body{\n        font-family: 'Nunito', sans-serif;\n        width:100vw;\n        height:100vh;\n    }\n    h1,h2,h3,h4,h5,h6{\n        font-family: 'Open Sans', sans-serif;\n    }\n    *, *:before, *:after {\n        box-sizing: inherit;\n    };\n    input{\n        padding:10px 20px;\n        box-shadow:none;\n    }\n    .react-dropdown-select-item{\n        color: black;\n    }\n`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from 'styled-components';\nimport { Theme, GloablStyle } from './theme';\nimport { UserProvider } from './Contexts/UserContext';\n\nReactDOM.render(\n    <React.StrictMode>\n        <UserProvider>\n            <ThemeProvider theme={Theme}>\n                <GloablStyle />\n                <App />\n            </ThemeProvider>\n        </UserProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}