datasource db {
  provider = "postgresql"
  url      = "postgresql://matico@localhost:5432/apps?schema=public"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  apps          App[]
  colaborations Colaborator[]
  Datasets      Dataset[]

  @@map("users")
}


model Colaborator {
  id           String  @id @default(cuid())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  resourceId   String
  resourceType String
  view         Boolean
  edit         Boolean
  manage       Boolean
  apps         App @relation(fields:[resourceId], references: [id])       
  @@map("colaborators")
  @@unique([userId,resourceId])
}

model App {
  id          String   @id @default(cuid())
  spec        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  name        String
  description String
  public      Boolean
  ownerId     String
  colaborators Colaborator[]
  noViews     Int @default(0) 
  noForks     Int @default(0) 
  owner       User     @relation(fields: [ownerId], references: [id])
  @@map("apps")
}

model Dataset {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String
  description String
  public      Boolean
  path        String
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  @@map("datasets")
}
